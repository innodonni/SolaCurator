! Copyleft Adonikam Virgo. See LICENCE.md for MIT licence.

Constant Story "SOLA CURATOR";
Constant Headline " - A post-apocalyptic adventure, by Adonikam Virgo.^
                  Source available at https://github.com/innodonni/SolaCurator^
                  Compiler by Graham Nelson. Quixe interpreter by Andrew Plotkin.
                  Talk by Greg Boettcher, Krister Fundin, and Mark J. Tilford.
                  Doors by L. Ross Raszewski and Max Kalus.
                  OutOfReach by Marnie Parker. Dirs by Gunther Schmidl.
                  Flags by Adam Cadre and Fredrik Ramsberg.
                  GoNeighbour by Alan Trewartha. Info by Jesse Burneko.
                  PrintSlow by D Cornelson (glulx port by Adonikam Virgo).
                  HelpRoutines, NewbieGrammar and ExpertGrammar by Emily Short.^";
!Constant DEBUG; ! compile with -D
Constant DEATH_MENTION_UNDO;
Constant MANUAL_PRONOUNS;
Constant AMUSING_PROVIDED;
Constant MAX_SCORE = 90;
Release 1;
Serial "191125";
Array UUID_ARRAY string "UUID://E2BE7957-5592-4C9D-958A-71FB1EF76928//";

[ Amusing;
 "Have you tried the following:^
 search self^
 change mind^
 give bag to self^
 say prayer to motorcycle gods^
 taste cushion^
 read shirt^
 kiss pews^
 examine trouser pockets";
];

Replace Refers; !provided by GoNeighbour.h
Include "parser";

Object bag "rucksack"
 with name 'bag' 'rucksack' 'backpack' 'pack' 'sack' 'gear' 'belongings' 'camping' 'kit' 'stock',
 !article 'your', ! crashes Z-Machine!
 description "Your rucksack contains all of your worldly belongings (mostly camping gear).",
 before [;
  Open,LetGo: if (location ~= Church or pews) "There's no advantage to unpack until you've found a suitable shelter.";
  Drop: if (location ~= Church or pews) "You're not giving up yet. There has to be somewhere you can kip that is out of the elements.";
  PutOn,Transfer,Insert: if (second ~= pews) "Best keep your valuables with you.";
  Touch: "The backpack is a scratch polyester canvas. They don't make them like they used to.";
 ],
 after [;
  Drop: if (self hasnt general) score = score + 5; give self general;
  "Time to make up your bed!";
  Examine: <<Search self>>;
 ],
 has container transparent openable;

Constant SACK_OBJECT = bag;

Include ">GoNeighbour.h";
Include ">outofrch.h";
Include ">verbs.inf";
Include ">topics.inf";
Include ">doors.h";
Include ">doors2.h";
Constant ShowRooms;
Include ">dirs_2.h";

! Flag definitions:
! 0: Has the player seen the billboard/the word Jerusalem?
! 1: Is Ben idle (has the player had the initial conversation)?
! 2: Has the player seen the Church (with no graffiti on it)?
! 3: Has the player felt the fresh woodstain on the door?
! 4: Has the player unlocked the Church before?
! 5: Has the player examined themselves (can answer "what are you after?")?
! 6: Has Ben told the player about his son?
! 7: Has the player accepted the terms of use of the church?
Constant FLAGCOUNT = 8;
Include ">newflags.h";

Object newplayer "yourself"
 with name 'you',
 description "You consider yourself a ~truther~. There isn't as much money in journalism as there was last century when you started, but the freedom it affords you means more than wealth. It doesn't much matter what you write anyway, in post-truth society.",
 capacity 100,
 add_to_scope body mind limbs clothes camp bed,
 life [;
  Answer: "You don't hear an echo here.";
 ],
 before [;
  Attack,Cut,Take,Disrobe,Drop: "If you need a break, type ~save~ or ~quit~.";
  Rub: "You brush off the dust that accumulated on your clothing during the journey.";
  Search: "Your mind is too clouded for introspection right now.";
  Touch: "Still here.";
  Smell,Taste: "Salty. No chance for a wash here, but you had one yesterday.";
  Tell: "You don't feel immensely encouraged.";
 ],
 after [;
  Examine: SetFlag(5);
 ],
 react_after [;
  Inv: if (child(pockets)) {
    print "^In your trouser pockets:^";
    !WriteListFrom(child(pockets), FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT);
    c_style=FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT;
    wlf_indent=1; WriteListR(child(pockets));
   }
 ],
 each_turn [;
  if (parent(player) ~= pews && parent(papers) ~= bag) {
   give papers ~open; move papers to bag; move bag to player;
   print "You place the papers gently back in your bag. You don't want to lose any pages accidentally.^";
  }
  if (parent(card) ~= pockets or nothing) {
   move card to pockets;
   print "You put your bank card away in your pocket until you need to use it.^";
  }
 ],
 has concealed animate proper transparent;

Object body "body"
 with name 'torso' 'body' 'groin' 'privates' 'head' 'hand' 'hands',
 article 'your',
 description "From what you can tell, everything is in its place.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: <<Attack player>>;
  Rub: <<Rub player>>;
  Search: <<Inv player>>;
  Touch: <<Touch player>>;
  Smell,Taste: <<Smell player>>;
  Turn: "You're feeling stiff from the journey.";
 ],
 has scenery concealed;

Object mind "mind"
 with name 'mind' 'thoughts' 'doubt' 'doubts',
 article 'your',
 description "You need to focus on finding shelter.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: <<Attack player>>;
  Examine: rtrue;
  Search: "You don't need to think too hard to explore a new town. Type ~hint~ if you're stuck.";
  default: "You can't put your mind to it.";
 ],
 has scenery concealed;

Object limbs "limbs"
 with name 'leg' 'legs' 'limb' 'limbs' 'arm' 'arms',
 article "your",
 description "As good-looking as ever.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: "You're rather attached to your limbs actually.";
 ],
 has scenery concealed pluralname;

Object clothes "clothes" newplayer
 with name 'shirt' 'top' 'trousers' 'clothing' 'clothes' 'vestments' 'garb' 'pants',
 article "your",
 description "As good-looking as ever.",
 add_to_scope pocket pockets,
 before [;
  Search: "There are pockets in your shirt and trousers.";
  Read: "(first removing shirt)^Across the back of your shirt is emblazoned the phrase ~Gamerr~. You quickly put it back on!";
  Disrobe,Drop: "You're not ready to tuck yourself in yet.";
 ],
 has clothing worn legible pluralname;

Object pocket "shirt pocket"
 with name 'shirt' 'pocket' 'pockets',
 article "your",
 description "A decorative pocket, sewn shut.",
 has static;

Object pockets "trouser pockets"
 with name 'trouser' 'pocket' 'pockets',
 article "your",
 description "Deep pockets, ready for adventure! Still, you try not to use them in case anything falls out.",
 capacity 1,
 before [;
  Search: move card to pockets;
  "To your surprise, you find your bank card in your trouser pockets. Thankfully it didn't fall out while you were riding along - it could come in handy.";
  Receive: "You can't fit anything more in your pockets.";
 ],
 has static pluralname container open transparent;

[ Initialise;
  player = newplayer;
  location = Town;
  move bag to player;
  InitDoors();
#IfDef DEBUG;
  random(-1); ! set seed
#EndIf;
  !parser_trace = 2;
  Banner();
  print "^You've just arrived at Beth'oni a small town in Israel.
   Doubt fills your mind, crippling your thoughts.
   Something is wrong with you, but carrying on won't find it now...
   it's time to stop for the night.
   The sun's heat is rapidly weakening and the nights here are frightfully cold.
   You chain your motorbike here to conserve battery charge,
   shoulder your bag and turn to face the task of making camp.^";
  return 2;
];

Include ">smartcantgo.h";

Class Room
 with cant_go [; SmartCantGo(); ];

Class Outside
 with class Room,
! with add_to_scope sun, ! doesn't work - use found_in instead
 has transparent light;

Class Inside
 with class Room,
 has concealed light;

Outside Town "Town"
 with name 'street' 'town' 'settlement',
 description "Once a farming settlement, the buildings here are the ruined shells of simple dwellings. Most of the roofs caved in centuries ago, but if you can find one intact it's still your best bet for staying warm overnight. The street continues south towards a square and the main road stretches out of town to the north-east.",
 react_before [;
  !Examine,Search: if (noun == self) { print "(",(the) buildings,")^"; <<Search buildings>>; }
 ],
 ne_to "You wearily survey the road you arrived on as it tails into the distance. An old billboard stands at the side of the road leading into town.",
 s_to Square;

Object board "billboard" Town
 with name 'old' 'billboard' 'board' 'writing' 'hoarding' 'advertisement',
 description "Whatever was on the billboard peeled off long ago and it is now host to a veritable bulletin board of writing from visitors.",
 before [;
  Read: if (FlagOff(0)) score = score + 5; SetFlag(0);
  "Much of what has been written is in an old language you recognise as English, but there is some modern Arabic as well. From what you can read, you aren't the first person travelling this route to Jerusalem for answers.";
  Search: "You smile wryly; searching in the digital sense wouldn't be possible because the Internet is a thing of the past. You don't notice any familiar names without reading it in full.";
  LookUnder: "Just drifts of dust from the road and discarded dried up marker pens.";
  Rub: "The board has lasted years - it looks like the marker pens used were good quality.";
 ],
 has scenery legible;

Outside Square "Square"
 with name 'square',
 external_name 'square',
 description "Many travellers have passed through here before you. The square is no more than a few dozen paces across surrounded by buildings, but is littered with detritus from campers. The street continues north out of town.",
 before [;
  Examine,Search: if (noun == self) "The taller building on the east side appears to be a church. Hopefully the roof is intact.";
 ],
 n_to Town,
 e_to ChurchDoors,
 in_to ChurchDoors;

Object waste "detritus" Square
 with name 'detritus' 'litter' 'waste' 'rubbish' 'junk' 'campers^',
 description "It's all junk - nothing serviceable.",
 before [;
  Take: "It's all junk - not worth taking.";
 ],
 react_before [;
  Sleep: if (noun == self) "^Are you serious?!";
 ],
 has scenery;

Object graffiti "graffiti"
 with name 'art' 'graffiti' 'tag' 'tags' 'star' 'stars' 'crescents',
 description "I suppose you could call it art. Although it has been drawn over several times, it looks like both the ~Goats~ and the ~K-Rhyme~ gangs have tagged this town.",
 found_in Town Square,
 before [;
  Examine: if (self hasnt general) score = score + 5; give self general;
  Search: "Some stars of David and Star and Crescents have been drawn in solidarity with other visitors.";
 ],
 has scenery;

Object ChurchBuilding "church building" Square
 with name 'tall' 'taller' 'church' 'building' 'buildings' 'indoors',
 description "The church building seems to be the only one not covered in graffiti.",
 before [;
  Examine: SetFlag(2); give ChurchDoors ~concealed;
  Enter,Go: <<Enter ChurchDoors>>;
 ],
 after [;
  Examine: ChurchDoors.describe();
 ],
 has scenery enterable;

Object card "bank card"
 with name 'bank' 'debit' 'credit' 'card',
 description "You wonder why you carry this around. Banks are a relic of the past.",
 article "your",
 before [;
  Examine: if (self hasnt general) score = score + 5; give self general;
  Insert,Transfer,PutOn,Drop: "You might want to hold onto that, even though you have no money in the bank at the moment.";
 ];

DirDoor ChurchDoors "church doors"
 with name 'wooden' 'church' 'door' 'doors//p' 'doorway' 'entrance' 'exit',
 describe [;
  print "^";
  if (self has open) { self.when_open(); rtrue; }
  self.when_closed(); rtrue;
 ],
 add_to_scope handles latch,
 description "The wooden doors have withstood the elements and are still solid and impassable. Their only feature is a round brass handle on each.",
 when_closed "The church doors seem to be latched shut.",
 when_open "The door to the church stands ajar.",
 e_to Church,
 w_to Square,
! door_to [;
!  if (self in Square) return Church; return Square;
! ],
! door_dir [;
!  if (self in Square) return e_to; return w_to;
! ],
 with_key card,
! found_in Square Church,
 before [;
  give self ~concealed;
  if (action == ##Pull) print "(first taking the handle)^";
  Pull: if (self in Square && self hasnt open) "The doors don't seem to open outwards after all. Silly handles!";
  if (self in Square && self has open) <<Close self>>;
  if (self in Church && self hasnt open) "You'll have to lift the latch first.";
  "Do you intend to exit the church?";
  Push: if (self in Church && self hasnt open) "The doors don't seem to open outwards.";
  if (self in Church && self has open) <<Close self>>;
  <<Open self>>;
  Open: if (self hasnt open) rfalse; ! continue
  if (self in Church) "Do you intend to exit the church?";
  "Do you intend to enter the church?";
  Search: self.foundlatch();
  if (self hasnt open) "There is a gap between the doors. It looks like only a latch keeps the doors shut.";
  Enter: if (player in Church) give self ~enterable;
         if (player in Square) give self enterable;
  Touch: SetFlag(3); "The door has been looked after, perhaps was even stained this year.";
 ],
 foundlatch [;
  if (latch has concealed) score = score + 5; give latch ~concealed;
 ],
 unlock [;
    SetFlag(4);
    self.foundlatch();
    give self ~concealed ~locked open;
    give Church transparent; !teleportable only while open
 ],
 after [;
  Unlock: self.unlock(); print "By slotting your bank card between the doors, you manage to lift the latch. ";
  Close: give self locked; give Church ~transparent; !teleportable only while open
  if (self in Church && self hasnt general) { score = score + 5; give self general; }
  "The doors latch shut, locking intruders out.";
 ],
 react_before [;
  Pray: if (noun == self) {
    self.unlock();
    self.describe();
    rtrue;
  }
  Listen: if (noun == self) "Silence - perfect place to sleep!";
  Sleep: if (noun == self || (noun == d_obj && player in Church)) <<Make bed>>;
 ], 
 has static concealed door openable lockable locked enterable pluralname;

Object handles "brass handles"
 with name 'old' 'tarnished' 'knob' 'knobs' 'round' 'brass' 'handle' 'handles',
 description "Round brass knobs, tarnished with age.",
 before [;
   give self ~concealed;
   if (action == ##Push or ##Pull && ChurchDoors hasnt open) rfalse;
   Turn: "The handles won't turn - they seem to be just to grip the door with.";
   PushDir: if (second == in_obj) <<Push ChurchDoors>>;
   if (ChurchDoors hasnt open) "Despite your efforts, the doors remain shut.";
   Pull: if (player in Church) "Do you intend to exit?";
   <<Open ChurchDoors>>;
   Push: if (player in Church) <<Close ChurchDoors>>;
   "Do you intend to enter?";
 ],
 has static concealed pluralname;

Object latch "latch"
 with name 'latch',
 before [;
   if ((action ~= ##Open or ##Turn || second ~= card) && TestScope(Square,player) && ChurchDoors has locked) "You can't open the latch that way.";
   if (action == ##Push or ##Pull && TestScope(Church,player) && ChurchDoors hasnt open) "You can't open the latch that way.";
   Open,Turn: if ((TestScope(Church,player) || second == card) && ChurchDoors hasnt open) {
    if (pews == parent(player)) "You can't reach the doors from the pew.";
    ChurchDoors.unlock();
    move card to pockets;
    "You lift the latch and the door opens.";
   }
   if (player in Square) "You cannot fit your hand between the doors.";
   ChurchDoors.unlock();
   "You lift the latch easily and the door opens.";
   Pull: if (TestScope(Church,player) && ChurchDoors has open) "Do you intend to exit?";
   Push: if (TestScope(Church,player)) <<Close ChurchDoors>>;
   PushDir: if (second == u_obj && TestScope(Church,player)) <<Open ChurchDoors>>;
   "You can't open the latch that way.";
 ],
 has static concealed openable;

Inside Church "Church"
 with name 'church',
 description "The church is furnished with altar and pews and is quite a contrast from the mess outside. Sunlight streams in through high windows, but the room is welcomingly cool.",
 before [;
  if (self hasnt general) score = score + 20; give self general;
 ],
 w_to ChurchDoors,
 out_to ChurchDoors,
 react_before [;
  Wait: "You begin to feel even more drowsy.";
  Pray,Listen: if (noun == self or nothing) "Silence - perfect place to sleep!";
 ],
 react_after [;
  Jump,JumpOn,JumpIn: print "^Some mortar dust descends from the ceiling.^";
 ];

Object windows "windows" Church
 with name 'tall' 'arched' 'high' 'windows' 'window' 'sunlight',
 description "Tall, arched windows let in sunlight high out of reach.",
 before [;
  Examine,ThrownAt: ;
  default: "You can't reach the windows.";
 ],
 has scenery pluralname;

InsideOrOn pews "pews" Church
 with name 'pew' 'pews',
 description "Plain wooden benches welded to the ground - too narrow to sleep on.",
 before [;
  Kiss: "You feel awkward kissing a surface where many posteriors have been.";
  Touch,Rub: "The surface is smooth and inviting. You aren't worried about getting splinters.";
  LookUnder: if (cushions has general) rfalse;
  if (cushions has concealed) score = score + 5;
  give cushions ~concealed; "Under each pew are small cushions.";
 ],
 react_after [;
  Enter:
   if (self hasnt general) print "You heave a sigh of relief to have a place to sit at a proper height. Still, you decide the pews aren't wide enough to sleep on.";
   if (self hasnt general) score = score + 5;
   give self general;
   if (cushions has concealed) print " As you unconsciously lean forward to stretch your back, you notice something underneath. ";
   !rtrue;
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  JumpOn,JumpIn: if (noun == self) print "Glancing around first, you summon the energy to jump onto a pew. Miraculously, it holds your weight. ";
  Sleep: if (noun == self) "^The pews are alright to sit on, but not ideal to sleep on.";
  Listen: if (noun == self && self == parent(player)) "The pew creaks.";
 ],
 limittake true,
 droponfloor false,
 includefloor false,
 has scenery supporter enterable transparent pluralname;

Object cushions "cushions" Church
 has concealed supporter enterable pluralname
 with name 'small' 'wool' 'woolen' 'woollen' 'embroidered' 'designs' 'prayer' 'kneeling' 'cushion' 'cushions' 'church^s', ! Genitive (of ) not supported
 description "The kneeling cushions for prayer have simple designs embroidered in wool on the surface, none with discernable text.",
 before [;
  PushDir,Take: "There are too many cushions to do that.";
  Pull,Push: give self general ~concealed;
  "You move the cushions away from underneath the pews.";
  Enter: "They aren't wide enough to sleep on.";
  Receive: move noun to location;
  print_ret (The) noun, " tumbles from the soft surface to the floor.";
  Taste: "The wool against your teeth makes you shiver unpleasantly.";
 ],
 react_before [;
  Sleep: if (noun == self) "Nowhere near ideal.";
  Pray: if (noun == self) {
   give self ~concealed;
   "You feel awkward praying when Christ has already returned, but you're so drowsy you figure it might help you sleep.";
  }
 ];

Object altar "altar" Church
 has static concealed supporter enterable
 with name 'altar' 'stone' 'table' 'alter' 'unembellished' 'bare',
! parse_name [ i word; ! presence of parse_name forces disambiguation
!  if (parser_action == ##TheSame) return -2;
!  for (::i++) {
!   word=NextWord();
!   if (~~WordInProperty(word,self,name)) return i;
!  }
! ],
 description "What you assume to be the altar is a bare, unembellished stone table. Any cloth, cross or other religious artefacts seem to have been removed for safekeeping.",
 before [;
  give self ~concealed;
  Sleep,Touch,Rub,Climb,Enter,Push,Pull: 
  if (self hasnt general) score = score + 5; give self general;
  give altarlegs ~concealed;
  "As you put your weight on the altar, it wobbles. If the legs aren't all the same length, you might as well sleep on the floor.";
  LookUnder: <<Examine altarlegs>>;
 ],
 react_before [;
  Sleep: if (noun == self && self has general) "Nowhere near ideal.";
  JumpOn: if (noun == self) "The altar is too high to jump onto. Perhaps climbing would be less ambitious.";
  Pray: if (noun == self or nothing) "Silence - perfect time to sleep!";
 ];

Object altarlegs "altar legs" Church
 has scenery concealed pluralname
 with name 'altar' 'stone' 'table' 'alter' 'leg' 'legs' 'bare' 'unembellished',
 parse_name [ i word; ! presence of parse_name forces disambiguation
  if (parser_action == ##TheSame) return -2;
  for (::i++) {
   word=NextWord();
   if (~~WordInProperty(word,self,name)) return i;
  }
 ],
 description "Stubby stone legs protrude from the bottom of the altar. They are high enough off the ground to allow the altar to wobble, but not high enough for anything to go underneath.",
 before [;
  give self ~concealed;
 ];

InsideOrOn bike "motorbike" Town
 with name 'motorbike' 'bike' 'electric' 'ride' 'vehicle' 'bicycle' 'motorcycle' 'standard',
 description "It's a standard electric motorbike, and your ticket to finding the City of Peace.",
 initial "Your bike stands chained here.",
 before [;
  Take: "The bike is much too large and heavy for you to carry, and there's no need to wheel it along anywhere right now.";
  Push,Pull,PushDir: "You decide to leave the bike here until you've found a place to stay the night.";
  Squeeze,LookUnder: if (self == parent(player)) "You're too stiff from the ride."; 
  !PutOn,Transfer,Insert: if (second ~= road) "It's best to keep the bike out of sight for now.";
  Lock: "The bike is already chained up.";
  Unlock,SwitchOn: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
  Taste:
    if (self == parent(player)) "You're too stiff from the ride.";
    "Yuck!";
  Touch: "The bike is still hot from being out in the sun.";
  Rub: "You touch the bike, but there is no dust or grease on the surface.";
  Search: give battery ~concealed; give chain ~concealed;
 ],
 after [;
  Examine: <<Search self>>;
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  Go: if (self == parent(player) && noun == d_obj) <<Exit self>>;
  Sleep: if (noun == self || (noun == nothing && self == parent(player))) "Nowhere near ideal.";
  Pray: if (noun == self) "You pray fervently for the strength to continue your journey, but the motorbike remains unmoved.";
  Listen: if (noun == self) "Silence - the wonders of electricity.";
 ],
 limittake true,
 droponfloor true,
 includefloor false,
 has light static supporter enterable switchable lockable; !female if animate

Object battery "battery" bike
 has concealed
 with name 'battery',
 description "There should be enough charge to finish your journey tomorrow, unless you change your mind before then.",
 before [;
  Take: "The sealed battery unit is clipped securely into the bike, and is wedged in too tightly to remove. You've learned to camp without the need for that much juice anyway.";
  Search,Open,Touch,Taste: "Lucky the contacts aren't exposed!";
  Attack: "A flat battery is the last thing you need.";
 ],
 after [;
  give self ~concealed;
 ];

Object chain "chain" bike
 has concealed lockable openable locked
 with name 'chain' 'lock' 'security' 'wheel',
 description "The chain is not the most sturdy brand, and the bike is not even chained up to anything. Thankfully there's no-one about.",
 before [;
  Open,Take,Unlock: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
  Pull: "The security lock clanks coldly against the wheel.";
 ],
 after [;
  give self ~concealed;
 ];

Book papers "pile of papers" bag
 has legible openable
 with name 'pile' 'papers' 'notes' 'journal' 'file' 'pages' 'straps',
 parse_name [ w n;
  w = NextWord();
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  if (w == 'of') { n++; w = NextWord(); }
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  return n;
 ],
 !invent [; if (inventory_stage == 1) rtrue; rfalse; ], ! hiding crashes Z-Machine
 description "In addition to your journal is a pile of various notes you have collected.",
 before [;
  if (action == ##Read or ##Consult or ##Search && parent(player) ~= pews) "First priority is to find a place to rest.";
  if (action == ##Read or ##Consult or ##Search && self hasnt open) "The journal is bound shut with bulging elastic straps.";
  Take: if (parent(player) ~= pews) "First priority is to find a place to rest.";
  Read: "The first page of your journal begins:^Research topics / article ideas (year):^
        Calendar dates - does history matter any more? (863)^
        Inking - ancient printing revised for the modern era (868)^
        Goat psychology - eyewitnesses and ~left behind~ syndrome (877)^
	Sola Scriptura - what the Bible might have said (952)^
        Final solutions - flooding the world with clean water (986)^
        Abysmal release - devillish designs for humanity (993)^
        God incarnate - what is love?^
        ^No number has been written for the last entry.";
  Search: "There's too many pages to rifle through, but you could look something up.";
  Open,Push,Pull: if (parent(player) ~= pews) "Not standing here. You don't want to have to chase any pages that might fall out.";
  if (self hasnt general) score = score + 5; give self general;
  if (self has open) rtrue; ! default Push/Pull if open??
  give self open;
  "You carefully undo the straps that wrap up your notes and bind your journal closed.";
  Transfer,Insert,PutOn,Drop: if (parent(self) ~= bag) { give self ~open; move self to bag;
   "You place the papers gently back in your bag. You don't want to lose any pages accidentally.";
  }
  LookUnder: "The back of your journal is stuffed full of loose pages that you plan to read later. The reverse of the back page is blank, besides a few smudges from your inky fingers due to being the lowest in the pile.";
 ],
 after [;
  Examine: if (parent(player) ~= pews) print "They are far too interesting to give a single glance. You resolve to read them once you have taken the weight off your legs.^";
 ];

Object roofs "roofs"
 has scenery pluralname
 with name "roofs" "rooves" "collapsed" "caved" "rubble" "stone" "thatch",
 description "The rubble is impassable and would make a terrible place to sleep.",
 found_in Town Square,
 before [;
  Take: "The shifted rubble sends up a plume of dust and you toss it back, eyes watering. It wouldn't make for very good bedding material.";
  Open,Push,Pull: "There's no use. You'd rather sleep in the open than shift rubble about, so you press on, hoping for a clean space to camp.";
  Search,LookUnder:
    if (bike == parent(player)) "You can't reach the roofs from the bike."; !outofrch.h
    "The hopes of scavenging anything are slim, and the allure can wait until morning when you're more fresh.";
 ];

Object buildings "various buildings"
 has scenery pluralname enterable
 with name 'ruins' 'ruined' 'building' 'buildings' 'wall' 'walls' 'shells' 'simple' 'dwellings' 'rooms' 'abandoned' 'roofed' 'structure' 'structures' 'doorways' 'various' 'houses',
 description "None of the dwellings here appear to be inhabitable.",
 found_in Town Square,
 before [;
  Climb,Enter: <<Examine roofs>>;
  Examine,Search: if (location == Square) <<Search Square>>;
 ];

InsideOrOn road "road"
 with name "main" "road" "track" "tracks" "trail" "dust" "dusty" "path",
 description "The road is now no more than a dusty trail, though in the bike tracks you can see that the surface was tarred to a good standard when it was built.",
 found_in Town,
 before [;
  Taste:
    if (bike == parent(player)) "You're too stiff from the ride to reach down from the motorbike.";
    "Yuck!";
  Touch,Rub:
    if (bike == parent(player)) "You're too stiff from the ride to reach down from the motorbike.";
  LookUnder: "You'd have to dig a hole first."; Dig: "You'd need more than a shovel to dig road tar.";
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  Sleep: if (noun == self || (noun == nothing && self == parent(player))) "Nowhere near ideal.";
 ],
 limittake false,
 droponfloor true,
 includefloor true,
 has scenery concealed supporter enterable;

Object sun "sun"
 has scenery
 with name 'sun' 'evening' 'sunset' 'sun-set' 'setting',
 article 'the',
 found_in [; return (location ofclass Outside); ],
 description "There is still enough daylight to find a more suitable spot to settle.",
 before [;
  Make,Examine,Listen,Worship: ;
  default: "You can't reach it.";
 ],
 react_before [;
  Wait: print_ret (string) self.description;
  Sleep: if (noun == self) <<Make bed>>;
  Pray,Listen: if (noun == self) "The sun warms you silently.";
 ];

Object camp "campfire"
 has scenery concealed
 with name "camp" "shelter" "fire",
 article "a",
 description "You don't have any wood. You'll need to find an abandoned building or roofed structure to keep warm during the night.",
 react_before [;
  SwitchOn,Burn: if (self == noun or second) print_ret (string) self.description;
  default: if (action ~= ##Make && self == noun or second) "You haven't made a camp yet. You hope to shelter indoors.";
 ];

Object bed "bed"
 has scenery concealed
 with name "bed" "sleeping" "tent",
 article "a",
 description "All you have is a sleeping bag, but that won't keep you warm out in the open.",
 react_before [;
  default: if (action ~= ##Make && self == noun or second) "You haven't made a bed yet.";
 ];

Class Man
 has male animate proper
 class Character
 with qseqstates 0,
 life [;
  Answer: NotTalkSub(); rtrue;
  Order:  NotTalkSub(); rtrue;
 ],
 before [;
  TalkTo: self.select(1); rtrue; ! 1, because Quip #1
 ],                              ! is the main menu.
 quip [ a b; switch (a) {
      ! Quip #1: Main menu
      11: ! Main menu: no quip name needed
      12: ! Main menu: no reply needed
      13: qtype = MainMenu;
          killz = true;
      14: ! Here's where we define all the options that are
          ! ever available from the main menu. For an 
          ! explanation of this syntax, consult the comments
          ! at the beginning of Gtalk.h, specifically Step 5.
          return Qlist(b,   1,  ! number of quips in this list
                            2); ! Quip #2
      ! Quip #2
      21: "~Hi there, who are you?~";
      22: self.qoff(2);
          "~I'm ", (the) self, ".~"; 
 } rfalse; ];

Man ben "Ben"
 with name 'ben',
 description "It's Ben.",
 before [;
  ! select(1), because Quip #1 is the main menu.
  TalkTo: self.select(1); SetFlag(1); rtrue;
 ],
 quip [ a b; switch (a) {
      ! Quip #1: Main menu
      11: ! Main menu: no quip name needed
      12: ! Main menu: normally no reply needed
          if (FlagOff(1)) { "~You there!?~^
          An old man is here, sitting on an upturned paint tin. From his tan, he looks local, but it's hard to tell how old he is - he could be 500.^
          He doesn't turn to face you as you arrive."; }
      13: qtype = MainMenu;
          killz = true;
      14: ! Here's where we define all the options that are
          ! ever available from the main menu. For an 
          ! explanation of this syntax, consult the comments
          ! at the beginning of Gtalk.h, specifically Step 5.
          ! Note that if the conversation is initiated a second time,
          ! this could be a fresh list
          return Qlist(b,   3,   ! number of quips in this list
                            2,   ! Quip #2
                            5,   ! Quip #5
                           10);  ! Quip #10
      ! Quip #2 etc.
      21: qseq(1,"~Hi there, who are you?~","~Sorry, I didn't catch your name...~","~What was your name, again?~","~I've forgotten your name already.~");
      22: qcyc(2,"~Ben. Just Ben.~","~Where there's no government, there's no need for surnames. I just go by Ben.~","~The name's Ben.~","~Ben.~","~I told you, it's Ben.~"); 
      23: killz = true; ! disallow saying nothing
          qtransfer = 1; ! top-level quip; return to menu by default

      31: random("~Are you the vicar?~","~Are you the vicar, then?~","~You're the vicar, right?~","~Is the church yours?~");
      32: self.qoff(3); "Of sorts.";
      33: qtransfer = 1; ! top-level quip; return to menu by default

      41: qseq(3,"~What are you doing here?~","~What are you doing?~");
      42: self.qoff(4);
          if (FlagOn(6)) "~My son and I were heading to Jerusalem.~";
          else "~Pottering.~";
      43: killz = true; ! disallow saying nothing
          qtransfer = 1; ! top-level quip; return to menu by default

      51: "~Are you blind?~";
      52: "~I prefer the term 'visually less acute'.~"; 
      53: killz = true; ! disallow saying nothing
          killq = true; ! never say "What would you like to say?" for SubMenus
          qtype = SubMenu;
          qret(self, 5, 1, b); !fallback is 1 (the main menu)
      54: return Qlist(b,   2,   ! number of quips in this list
                            6, 7);

      61: "~How visually acute are you, then?~";
      62: self.qoff(6);
          qret(self, 5, 1, b); !fallback is 1 (the main menu)
          "~I get by. I'm not completely blind.~"; 
      64: return qret(self, 5, 1, b); !fallback is 1 (the main menu)

      71: "~So you can see me then.~";
      72: self.qoff(7);
          qret(self, 5, 1, b); !fallback is 1 (the main menu)
          "~Yes, I know someone's there, but not who.~"; 
      74: return qret(self, 5, 1, b); !fallback is 1 (the main menu)

      101: "~Can I help you?~";
      102: "~Yes you can. I've lost my radio.~ he says, frankly."; 
      103: killz = true; ! disallow saying nothing
           killq = true; ! never say "What would you like to say?" for SubMenus
           qtype = SubMenu;
           qret(self, 10, 1, b);
      104: return Qlist(b,   2,   ! number of quips in this list
                            11, 12);

      111: "~That's it?~";
      112: self.qoff(11);
           qret(self, 10, 1, b); !fallback is 1 (the main menu)
           if(score < 5 && self.qtest(12)) "~Yes, that's all.~ he says, stiffly. ~Can you help or not?~";
           else { SetFlag(6); "~No, I suppose not. My son hasn't returned, and the radio is the way I could reach him.~ he laments. ~It's him I'm really after.~"; }
      114: return qret(self, 10, 1, b);

      121: "~What does it look like?~";
      122: self.qoff(12);
           qret(self, 10, 1, b);
           "~It's a hand-held walkie-talkie gizmo, a sort of greyish black.~"; 
      124: return qret(self, 10, 1, b);

!    *   Do you know a way into the church?
!    -   - "I might!", he says, brightly. <>
!          "You want to stay in the church do you? <>
!          I have rules. No candles or naked flames. No graffiti. No judgement!"
!    *   * (flag7) [Accept]Sounds alright to me.
!    *   * (reject) [Reject]Think I'll take my chances.
!    {reject} (flag7) Alright, I'll follow your rules. Let me in the church!
 } rfalse; ];
