Constant Story "SOLA CURATOR";
Constant Headline "^A post-apocalyptic adventure^by Adonikam Virgo^";
!Constant DEBUG; 
Constant DEATH_MENTION_UNDO;
Constant MANUAL_PRONOUNS;
Constant AMUSING_PROVIDED;
Release 1;

[ Amusing;
 "Have you tried the following:^
 search self^
 change mind^
 give bag to self^
 say prayer to motorbike gods^
 taste cushion^
 read shirt^
 kiss pews^
 examine trouser pockets";
];

Include "parser";

Object bag "rucksack"
 with name 'bag' 'rucksack' 'backpack' 'pack' 'sack' 'gear' 'belongings' 'camping' 'kit',
! article 'your', ! crashes Z-Machine!
 description "Your rucksack contains all of your worldly belongings (mostly camping gear).",
 before [;
  Open,LetGo: if (location ~= pews) "There's no advantage to unpack until you've found a suitable shelter.";
  Drop: if (location ~= Church or pews) "You're not giving up yet. There has to be somewhere you can kip that is out of the elements.";
  PutOn,Transfer,Insert: if (second ~= pews) "Best keep your valuables with you.";
 ],
 after [;
  Drop: "Time to make up your bed!";
  Examine: <<Search self>>;
 ],
 has container transparent openable;

Constant SACK_OBJECT = bag;

Include ">verbs.inf";

! foreach(new object) stand on object?
! foreach(new object) Listen Smell, Taste [noun] Touch Search Cut Remove
! Burn/Light (dangerous, achieve little)

! x mirror on bike, kick wheel/tyre (on bike)
! ground = down. touch ground = possible from bike
! transfer bike to road -> fixed in place :(
! undo chain -> not openable
! jump in church

Object newplayer "yourself"
 with name 'you',
 description "You consider yourself a ~truther~. There isn't as much money in journalism as there was last century when you started, but the freedom it affords you means more than wealth. It doesn't much matter what you write anyway, in post-truth society.",
 capacity 100,
 add_to_scope body mind limbs clothes camp bed,
 before [;
  Attack,Cut,Take,Disrobe,Drop: "If you need a break, type ~save~ or ~quit~.";
  Rub: "You brush off the dust that accumulated on your clothing during the journey.";
  Search: "Your mind is too clouded for introspection right now.";
  Touch: "Still here.";
  Smell,Taste: "Salty. No chance for a wash here, but you had one yesterday.";
  Tell: "You don't feel immensely encouraged";
 ],
 react_after [;
  Inv: if (child(pockets)) {
    print "^In your trouser pockets:^";
    !WriteListFrom(child(pockets), FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT);
    c_style=FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT;
    wlf_indent=1; WriteListR(child(pockets));
   }
 ],
 has concealed animate proper transparent;

Object body "body"
 with name 'torso' 'body',
 article 'your',
 description "From what you can tell, everything is in its place.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: <<Attack player>>;
  Rub: <<Rub player>>;
  Search: <<Inv player>>;
  Touch: <<Touch player>>;
  Smell,Taste: <<Smell player>>;
 ],
 has scenery concealed;

Object mind "mind"
 with name 'mind' 'thoughts' 'doubt' 'doubts',
 article 'your',
 description "You need to focus on finding shelter.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: <<Attack player>>;
  Examine: rtrue;
  Search: "You don't need to think too hard to explore a new town. Type ~hint~ if you're stuck.";
  default: "You can't put your mind to it.";
 ],
 has scenery concealed;

Object limbs "limbs"
 with name 'leg' 'legs' 'limb' 'limbs' 'arm' 'arms',
 article "your",
 description "As good-looking as ever.",
 before [;
  Attack,Cut,Take,Disrobe,Drop: "You're rather attached to your limbs actually.";
 ],
 has scenery concealed pluralname;

Object clothes "clothes" newplayer
 with name 'shirt' 'top' 'trousers' 'clothing' 'clothes' 'vestments' 'garb' 'pants',
 article "your",
 description "As good-looking as ever.",
 add_to_scope pocket pockets,
 before [;
  Search: "There are pockets in your shirt and trousers.";
  Read: "(first removing shirt)^Across the back of your shirt is emblazoned the phrase ~Gamerr~. You quickly put it back on!";
  Disrobe,Drop: "You're not ready to tuck yourself in yet.";
 ],
 has clothing worn legible pluralname;

Object pocket "shirt pocket"
 with name 'shirt' 'pocket' 'pockets',
 article "your",
 description "A decorative pocket, sewn shut.",
 has static;

Object pockets "trouser pockets"
 with name 'trouser' 'pocket' 'pockets',
 article "your",
 description "Deep pockets, ready for adventure!",
 capacity 1,
 before [;
  Search: move card to pockets;
  "You find your bank card in your trouser pockets.";
  Receive: "You can't fit anything more in your pockets.";
 ],
 has static pluralname container transparent;

[ Initialise;
  player = newplayer;
  location = Town;
  move bag to player;
  !parser_trace = 2;
  "^^You've just arrived at Beth'oni a small town in Israel.
   Doubt fills your mind, crippling your thoughts.
   Something is wrong with you, but carrying on won't find it now...
   it's time to stop for the night.
   The sun's heat is rapidly weakening and the nights here are frightfully cold.
   You chain your motorbike here to conserve battery charge,
   shoulder your bag and turn to face the task of making camp.^";
];

Class Outside
! with add_to_scope sun, ! doesn't work - use found_in instead
 has light;

Class Inside
 has light;

Outside Town "Town"
 with name 'street',
 description "Once a farming settlement, the buildings here are the ruined shells of simple dwellings. Most of the roofs caved in centuries ago, but if you can find one intact it's still your best bet for staying warm overnight. The street continues south towards a square and the main road stretches out of town to the north-east.",
 react_before [;
  Examine,Search: if (noun == self) <<Search buildings>>;
 ],
 s_to Square;

Outside Square "Square"
 with name 'square',
 description "Many travellers have passed through here before you. The square is no more than a few dozen paces across surrounded by buildings, but is littered with detritus from campers. The street continues north out of town.",
 before [;
  Examine,Search: if (noun == self) "The taller building on the east side appears to be a church. Hopefully the roof is intact.";
 ],
 n_to Town,
 e_to ChurchDoors,
 in_to ChurchDoors;

Object waste "detritus" Square
 with name 'detritus' 'litter' 'waste' 'rubbish' 'junk' 'campers^' 'square',
 description "It's all junk - nothing serviceable.",
 before [;
  Take: "It's all junk - not worth taking.";
 ],
 react_before [;
  Sleep: if (noun == self) "^Are you serious?!";
 ],
 has scenery;

Object ChurchBuilding "church building" Square
 with name 'tall' 'taller' 'church' 'building' 'buildings',
 description "The church building seems to be the only one not covered in graffiti.",
 before [;
  Examine: give ChurchDoors ~concealed;
  Enter,Go: <<Enter ChurchDoors>>;
 ],
 after [;
  Examine: ChurchDoors.describe();
 ],
 has scenery enterable;

Object card "bank card"
 with name 'bank' 'debit' 'credit' 'card',
 article "your",
 before [;
  Insert,Transfer,PutOn,Drop: "You might want to hold onto that, even though you have no money in the bank at the moment.";
 ]; ! "search doors" or look [BETWEEN] doors

Object ChurchDoors "church doors"
 with name 'wooden' 'church' 'door' 'doors//p' 'doorway' 'entrance' 'exit',
 describe [;
  print "^";
  if (self has open) { self.when_open(); rtrue; }
  self.when_closed(); rtrue;
 ],
 add_to_scope handles latch,
 description "The wooden doors have withstood the elements and are still solid and impassable. Their only feature is a round brass handle on each.",
 when_closed "The church doors seem to be latched shut.",
 when_open "The door to the church stands ajar.",
 door_to [;
  if (self in Square) return Church; return Square;
 ],
 door_dir [;
  if (self in Square) return e_to; return w_to;
 ],
 with_key card,
 found_in Square Church,
 before [;
  give self ~concealed;
  if (action == ##Pull) print "(first taking the handle)^";
  Pull: if (self in Square && self hasnt open) "The doors don't seem to open outwards after all. Silly handles!";
  if (self in Square && self has open) <<Close self>>;
  if (self in Church && self hasnt open) "You'll have to lift the latch first.";
  "Do you intend to exit the church?";
  Push: if (self in Church && self hasnt open) "The doors don't seem to open outwards.";
  if (self in Church && self has open) <<Close self>>;
  <<Open self>>;
  Open: if (self hasnt open) rfalse; ! continue
  if (self in Church) "Do you intend to exit the church?";
  "Do you intend to enter the church?";
  Search: give latch ~concealed;
  if (self hasnt open) "There is a gap between the doors. It looks like only a latch keeps the doors shut.";
 ],
 after [;
  Unlock: print "By slotting your bank card between the doors, you manage to lift the latch.";
  Close: give self locked;
  "The doors latch shut, locking intruders out.";
 ],
 react_before [;
  Pray: if (noun == self) {
    give self ~concealed ~locked open;
    self.describe();
    rtrue;
  }
  Listen: if (noun == self) "Silence - perfect place to sleep!";
  Sleep: if (noun == self || (noun == d_obj && player in Church)) <<Make bed>>;
  Go: if (noun.door_dir() == self.door_dir())
   return self.open_by_myself();
  Enter: if (noun == self) return self.open_by_myself();
 ], 
 open_by_myself [ ks;
  if (self has open) rfalse;
  print "(first opening ", (the) self, ")^";
  ks = keep_silent;
  keep_silent = true;
  <Open self>;
  keep_silent = ks;
  if (self hasnt open) rtrue;
 ],
 has static concealed door openable lockable locked enterable pluralname;

Object handles "brass handles"
 with name 'old' 'tarnished' 'knob' 'knobs' 'round' 'brass' 'handle' 'handles',
 description "Round brass knobs, tarnished with age.",
 before [;
   give self ~concealed;
   if (action == ##Push or ##Pull && ChurchDoors hasnt open) rfalse;
   Turn: "The handles won't turn - they seem to be just to grip the door with.";
   PushDir: if (second == in_obj) <<Push ChurchDoors>>;
   if (ChurchDoors hasnt open) "Despite your efforts, the doors remain shut.";
   Pull: if (player in Church) "Do you intend to exit?";
   <<Open ChurchDoors>>;
   Push: if (player in Church) <<Close ChurchDoors>>;
   "Do you intend to enter?";
 ],
 has static concealed pluralname;

Object latch "latch"
 with name 'latch',
 before [;
   if ((action ~= ##Open or ##Turn || second ~= card) && TestScope(Square,player) && ChurchDoors has locked) "You can't open the latch that way.";
   if (action == ##Push or ##Pull && TestScope(Church,player) && ChurchDoors hasnt open) "You can't open the latch that way.";
   Open,Turn: if ((TestScope(Church,player) || second == card) && ChurchDoors hasnt open) {
    if (player in pews) "You can't reach the doors from the pew.";
    give ChurchDoors open ~locked ~concealed;
    move card to pockets;
    "You lift the latch and the door opens.";
   }
   if (player in Square) "You cannot fit your hand between the doors.";
   give ChurchDoors open ~locked;
   "You lift the latch easily and the door opens.";
   Pull: if (TestScope(Church,player) && ChurchDoors has open) "Do you intend to exit?";
   Push: if (TestScope(Church,player)) <<Close ChurchDoors>>;
   PushDir: if (second == u_obj && TestScope(Church,player)) <<Open ChurchDoors>>;
   "You can't open the latch that way.";
 ],
 has static concealed openable;

Inside Church "Church"
 with name 'church',
 description "The church is furnished with altar and pews and is quite a contrast from the mess outside. Sunlight streams in through high windows, but the room is welcomingly cool.",
 w_to ChurchDoors,
 out_to ChurchDoors,
 react_before [;
  Wait: "You begin to feel even more drowsy.";
  Pray,Listen: if (noun == self or nothing) "Silence - perfect place to sleep!";
 ],
 react_after [;
  Jump: print "^Some mortar dust descends from the ceiling.^";
 ];

Object windows "windows" Church
 with name 'tall' 'arched' 'high' 'windows',
 description "Tall, arched windows let in light high out of reach.",
 before [;
  Examine,ThrownAt: ;
  default: "You can't reach them.";
 ],
 has scenery pluralname;

Object pews "pews" Church
 with name 'pew' 'pews',
 description "Plain wooden benches welded to the ground - too narrow to sleep on.",
 before [;
  Kiss: "You feel awkward kissing a surface where many posteriors have been.";
  Touch,Rub: "The surface is smooth and inviting. You aren't worried about getting splinters.";
  LookUnder: if (cushions has general) rfalse;
  give cushions ~concealed; "Under each pew are small cushions.";
 ],
 react_after [;
  Enter:
   if (self hasnt general) print "You heave a sigh of relief to have a place to sit at a proper height. Still, you decide the pews aren't wide enough to sleep on.";
   give self general;
   if (cushions has concealed) print " As you unconsciously lean forward to stretch your back, you notice something underneath. ";
   rtrue;
 ],
 react_before [;
  Jump: if (noun == self) print "Glancing around first, you summon the energy to jump onto a pew. Miraculously, it holds your weight. ";
  Sleep: if (noun == self) "^The pews are alright to sit on, but not ideal to sleep on.";
  Listen: if (noun == self && player in self) "The pew creaks.";
 ],
 has scenery supporter enterable transparent pluralname;

Object cushions "cushions" pews
 has concealed supporter enterable pluralname
 with name 'small' 'wool' 'woolen' 'woollen' 'embroidered' 'prayer' 'kneeling' 'cushion' 'cushions' 'church^s', ! Genitive (of ) not supported
 description "The kneeling cushions for prayer have simple designs embroidered in wool on the surface, none with discernable text.",
 before [;
  PushDir,Take: "There are too many cushions to do that.";
  Pull,Push: give self general ~concealed;
  "You move the cushions away from underneath the pews.";
  Enter: "They aren't wide enough to sleep on.";
  Receive: move noun to location;
  print_ret (The) noun, " tumbles from the soft surface to the floor.";
  Taste: "The wool against your teeth makes you shiver unpleasantly.";
 ],
 react_before [;
  Sleep: if (noun == self) "Nowhere near ideal.";
  Pray: if (noun == self) {
   give self ~concealed;
   "You feel awkward praying when Christ has already returned, but you're so drowsy you figure it might help you sleep.";
  }
 ];
! Caution player may pray while cushions concealed (say prayer)

Object altar "altar" Church
 has static concealed supporter enterable pluralname
 with name 'altar' 'stone' 'table' 'alter',
 description "What you assume to be the altar is an unembellished stone table. Any cloth, cross or other religious artefacts seem to have been removed for safekeeping.",
 before [;
  Touch,Rub,Climb,Enter,Push,Pull: give self ~concealed;
  "As you put your weight on the altar, it wobbles. If the legs aren't all the same length, you might as well sleep on the floor.";
 ],
 react_before [;
  Sleep: if (noun == self) "Nowhere near ideal.";
  Jump: if (noun == self) "The altar is too high to jump onto. Perhaps climbing would be less ambitious.";
  Pray: if (noun == self or nothing) "Silence - perfect time to sleep!";
 ];
! disambiguate table legs!

Object bike "motorbike" Town
 with name 'motorbike' 'bike' 'electric' 'ride' 'vehicle' 'bicycle' 'motorcycle' 'standard',
 description "It's a standard electric motorbike, and your ticket to finding the City of Peace.",
 initial "Your bike stands chained here.",
 d_to Town, ! IF bike is STATIC
 before [;
  Take: "The bike is much too large and heavy for you to carry, and there's no need to wheel it along anywhere right now.";
  Push,Pull,PushDir: "You decide to leave the bike here until you've found a place to stay the night.";
  Squeeze,LookUnder: if (player in self) "You're too stiff from the ride."; 
  !PutOn,Transfer,Insert: if (second ~= road) "It's best to keep the bike out of sight for now.";
  Lock: "The bike is already chained up.";
  Unlock,SwitchOn: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
  Taste:
    if (player in self) "You're too stiff from the ride.";
    "Yuck!";
  Touch: "The bike is still hot from being out in the sun.";
  Rub: "You touch the bike, but there is no dust or grease on the surface.";
  Search: give battery ~concealed; give chain ~concealed;
 ],
 after [;
  Examine: <<Search self>>;
 ],
 react_before [;
  Sleep: if (noun == self || (noun == nothing && player in self)) "Nowhere near ideal.";
  Pray: if (noun == self) "You pray fervently for the strength to continue your journey, but the motorbike remains unmoved.";
  Listen: if (noun == self) "Silence - the wonders of electricity.";
 ],
 has light static supporter enterable switchable lockable; !female if animate

Object battery "battery" bike
 has concealed
 with name 'battery',
 description "There should be enough charge to finish your journey tomorrow, unless you change your mind before then.",
 before [;
  Take: "The sealed battery unit is clipped securely into the bike, and is wedged in too tightly to remove. You've learned to camp without the need for that much juice anyway.";
  Search,Open,Touch,Taste: "Lucky the contacts aren't exposed!";
 ],
 after [;
  give self ~concealed;
 ];

Object chain "chain" bike
 has concealed lockable openable locked
 with name 'chain' 'lock',
 description "The chain is not the most sturdy brand, and the bike is not even chained up to anything. Thankfully there's no-one about.",
 before [;
  Open,Take,Unlock: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
 ],
 after [;
  give self ~concealed;
 ];

Object papers "pile of papers" bag
 has legible
 with name 'pile' 'papers' 'notes' 'journal' 'file' 'pages',
 parse_name [ w n;
  w = NextWord();
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  if (w == 'of') { n++; w = NextWord(); }
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  return n;
 ],
 !invent [; if (inventory_stage == 1) rtrue; rfalse; ], ! hiding crashes Z-Machine
 description "In addition to your journal, you have collected various notes. They are far too interesting to give a single glance. You resolve to read them once you have taken the weight off your legs.",
 before [;
  Read,Take,Consult: "First priority is to find a place to sleep.";
  Search: "There's too many to rifle through at this moment.";
  Open,Push,Pull: "Not out here. You don't want to have to chase any pages that might fall out.";
  LookUnder: "The back of your journal is stuffed full of loose pages that you plan to read later. The reverse of the back page is blank, besides a few smudges from your inky fingers due to being the lowest in the pile.";
 ];

Object roofs "roofs"
 has scenery pluralname
 with name "roofs" "rooves" "collapsed" "caved" "rubble" "stone" "thatch",
 description "The rubble is impassable and would make a terrible place to sleep.",
 found_in Town Square,
 before [;
  Take: "The shifted rubble sends up a plume of dust and you toss it back, eyes watering. It wouldn't make for very good bedding material.";
  Open,Push,Pull: "There's no use. You'd rather sleep in the open than shift rubble about, so you press on, hoping for a clean space to camp.";
  Search,LookUnder:
    if (player in bike) "You can't reach the roofs from the bike.";
    "The hopes of scavenging anything are slim, and the allure can wait until morning when you're more fresh.";
 ];

Object buildings "dwellings"
 has scenery pluralname enterable
 with name 'ruins' 'ruined' 'building' 'buildings' 'walls' 'shells' 'simple' 'dwellings' 'rooms' 'abandoned' 'roofed' 'structure' 'structures' 'doorways' 'street' 'town' 'settlement',
 description "None of the dwellings here appear to be inhabitable.",
 found_in Town Square,
 before [;
  Enter: <<Examine roofs>>;
  Examine,Search: if (location == Square) <<Search Square>>;
 ];

Object road "road"
 has scenery concealed supporter enterable
 with name "main" "road" "track" "tracks" "trail" "dust" "dusty" "path",
 description "The road is now no more than a dusty trail, though in the bike tracks you can see that the surface was tarred to a good standard when it was built.",
 found_in Town,
 before [;
  Sleep: if (noun == self || (noun == nothing && player in self)) "Nowhere near ideal.";
  Taste:
    if (player in bike) "You're too stiff from the ride to reach down from the motorbike.";
    "Yuck!";
  Touch,Rub:
    if (player in bike) "You're too stiff from the ride to reach down from the motorbike.";
 ];
! stand in road; enter bike; sit on road?

Object sun "sun"
 has scenery
 with name 'sun' 'evening' 'sunset' 'sun-set' 'setting',
 article 'the',
 found_in [; return (location ofclass Outside); ],
 description "There is still enough daylight to find a spot to settle.",
 before [;
  Make,Examine,Listen,Worship: ;
  default: "You can't reach it.";
 ],
 react_before [;
  Wait: print_ret (string) self.description;
  Sleep: if (noun == self) <<Make bed>>;
  Pray,Listen: if (noun == self) "The sun warms you silently.";
 ];

Object camp "camp"
 has scenery concealed
 with name "camp" "shelter" "fire",
 article "a",
 description "You don't have any wood. You'll need to find an abandoned building or roofed structure to keep warm during the night.",
 react_before [;
  Burn: if (self == noun or second) { print (string) self.description; rtrue; }
  default: if (action ~= ##Make && self == noun or second) "You haven't made a camp yet.";
 ];

Object bed "bed"
 has scenery concealed
 with name "bed" "sleeping",
 article "a",
 description "All you have is a sleeping bag, but that won't keep you warm out in the open.",
 react_before [;
  default: if (action ~= ##Make && self == noun or second) "You haven't made a bed yet.";
 ];
