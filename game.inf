! Copyleft Adonikam Virgo. See LICENCE.md for MIT licence.

Constant Story "SOLA CURATOR";
Constant Headline " - A post-apocalyptic adventure, by Adonikam Virgo.^";
!Constant DEBUG; ! compile with -D
Constant DEATH_MENTION_UNDO;
Constant MANUAL_PRONOUNS;
Constant AMUSING_PROVIDED;
Constant MAX_SCORE = 100;
!Constant ROOM_SCORE = 5; !default
Release 1;
Serial "191125";
Array UUID_ARRAY string "UUID://E2BE7957-5592-4C9D-958A-71FB1EF76928//";

[ Amusing;
 "Have you tried the following:^
 examine trouser pockets^
 search self^
 read self^
 change mind^
 give bag to self^
 say prayer to motorcycle gods^
 taste cushion^
 kiss pews^
 undo knot";
];

Replace Refers; !provided by GoNeighbour.h
Include "parser";

Object bag "rucksack"
 with name 'bag' 'rucksack' 'backpack' 'pack' 'sack' 'gear' 'belongings' 'camping' 'kit' 'stock' 'supplies' 'material',
 article "your", ! using single-quote crashes Z-Machine!
 description "Your rucksack contains all of your worldly belongings (mostly camping gear).",
 before [;
  Search: if (location == Church or pews or aisle) "Besides your journal, you have everything you need to set up camp.";
  Open,LetGo: if (location ~= Church or pews or aisle) "There's no advantage to unpack until you've found a suitable shelter.";
  Drop: if (location ~= Church or pews or aisle) "You're not giving up yet. There has to be somewhere you can kip that is out of the elements.";
  PutOn,Transfer,Insert: if (second ~= pews or aisle) "Best keep your valuables with you.";
  Touch: "The backpack is a scratchy polyester canvas. They don't make them like they used to.";
  Rub: "The material is clean enough for your standards.";
 ],
 after [;
  Drop: if (self hasnt general) score = score + 5; give self general;
  "Time to make up your bed!";
  Examine: <<Search self>>;
 ],
 has container transparent openable;

Constant SACK_OBJECT = bag;

Include ">GoNeighbour.h";
Include ">outofrch.h";
Include ">verbs.inf";
Include ">topics.inf";
Include ">doors.h";
Include ">doors2.h";
Constant ShowRooms;
Include ">dirs_2.h";

! Flag definitions:
Constant SEENJERU 0; !Has the player seen the billboard/the word Jerusalem?
Constant SHOUTED 1; !Has the player shouted in the Square and heard a response?
Constant SEENCHUR 2; !Has the player seen the Church (with no graffiti on it)?
Constant FELTDOOR 3; !Has the player felt the fresh woodstain on the door?
Constant UNLOCHUR 4; !Has the player unlocked the Church before?
Constant SEENSELF 5; !Has the player examined themselves (can answer "what are you after?")?
Constant HEARDSON 6; !Has Ben told the player about his son?
Constant ACCEPTED 7; !Has the player accepted the terms of use of the church?
Constant FOLLOW 8; !Has the player invited Ben to follow them?
Constant FLAGCOUNT = 16;
Include ">newflags.h";

Object newplayer "yourself"
 with name 'you',
 description "You consider yourself a ~truther~. There isn't as much money in journalism as there was last century when you started, but the freedom it affords you means more than wealth. It doesn't much matter what you write anyway, in post-truth society.^^You are wearing a shirt and trousers.",
 capacity 100,
 scenic 'mind' 'thoughts' 'doubt' 'doubts' 0 "You need to focus on finding shelter."
        'torso' 'body' 'groin' 'privates' 'head' 'hand' 'hands' 0 "From what you can tell, everything is in its place."
        'shirt' 'top' 'trousers' 'clothing' 'clothes' 'vestments' 'garb' 'pants' 0 "There are pockets in your shirt and trousers."
        'shirt' 'pocket' 'top' 'decorative' 0 "A decorative pocket, sewn shut. Good thing too - you don't trust pockets.",
 add_to_scope camp bed pockets,
 life [;
  Answer: "You don't hear an echo here.";
 ],
 before [;
  Attack,Cut,Take,Disrobe,Drop: "If you need a break, type ~save~ or ~quit~.";
  Rub: "You brush off the dust that accumulated on your clothing during the journey.";
  Search: "Your mind is too clouded for introspection right now.";
  Touch: "Still here.";
  Smell,Taste: "Salty. No chance for a wash here, but you had one yesterday.";
  Tell: "You don't feel immensely encouraged.";
  Read: "(first removing shirt)^Across the back of your shirt is emblazoned the phrase ~Gamerr~. You quickly put it back on!";
 ],
 after [;
  Examine: SetFlag(SEENSELF);
 ],
 react_before [;
  Disrobe: "You're not ready to tuck yourself in yet.";
  Inv:
   print "You're carrying:^";
   print "  your clothes (being worn)^";
   if (bag in self) {
    print "  ", (Indefart) bag;
    c_style=FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT;
    wlf_indent=1; WriteAfterEntry(bag);
   }
   if (card in self) {
    print "^In your trouser pockets:^";
    print "  ", (Indefart) card;
    new_line;
   }
   rtrue;
 ],
 react_after [;
  Inv: print "  your clothes (being worn)^";
    if (false){!(child(pockets)) {
    print "^In your trouser pockets:^";
    !WriteListFrom(child(pockets), FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT);
    c_style=FULLINV_BIT + INDENT_BIT + NEWLINE_BIT + RECURSE_BIT;
    wlf_indent=1; WriteListR(child(pockets));
   }
 ],
 each_turn [;
  if (location ~= pews && parent(papers) ~= bag) {
   give papers ~open; move papers to bag; give bag ~open; move bag to player;
   print "You place the papers gently back and shoulder your bag again. You don't want to lose any pages accidentally.^";
  }
  else if (location ~= Church or pews or aisle && parent(bag) ~= player) {
   give bag ~open; move bag to player;
   print "You shoulder your bag again.^";
  }
  if (parent(card) ~= player or nothing) {
   move card to player;
   print "You put your bank card away in your pocket until you need to use it.^";
  }
 ],
 has legible concealed animate proper transparent;

Object pockets "trouser pockets"
 with name 'trouser' 'pocket' 'pockets',
 article "your",
 description "Deep pockets, ready for adventure! Still, you try not to use them in case anything falls out.",
 capacity 1,
 before [;
  Search: move card to player;
  if (self has general) "In your trouser pockets is your bank card. You'll put it away in your rucksack later - it could come in handy.";
  give self general;
  "To your surprise, you find your bank card in your trouser pockets. Thankfully it didn't fall out while you were riding along - it could come in handy.";
  Receive: "You can't fit anything more in your pockets.";
 ],
 has static pluralname container open transparent;

[ Initialise;
  player = newplayer;
  give Town ~scored;
  location = Town;
  move bag to player;
  InitDoors();
#IfDef DEBUG;
  random(-1); ! set seed
#EndIf;
  !parser_trace = 2;
  Banner(); ! required to distribute commercially without royalty payment
  print "Source available at https://github.com/innodonni/SolaCurator^
         Compiler by Graham Nelson. Quixe interpreter by Andrew Plotkin.
         Talk by Greg Boettcher, Krister Fundin, and Mark J. Tilford.
         Doors by L. Ross Raszewski and Max Kalus.
         OutOfReach by Marnie Parker. Dirs by Gunther Schmidl.
         Scenic by Richard Barnett, Joe Mason, Roger Firth and Stefano Gaburri.
         Flags by Adam Cadre and Fredrik Ramsberg.
         GoNeighbour by Alan Trewartha. Info by Jesse Burneko.
         Follower by Gareth Rees, Andrew Clover and Neil Brown.
         Moveclass by Neil Brown, Alan Trewartha and Matthew T Russotto.
         PrintSlow by D Cornelson (glulx port by Adonikam Virgo).
         HelpRoutines, NewbieGrammar and ExpertGrammar by Emily Short.^";
  print "^You've just arrived at Beth'oni a small town in Israel.
   Doubt fills your mind, crippling your thoughts.
   Something is wrong with you, but carrying on won't find it now...
   it's time to stop for the night.
   The sun's heat is rapidly weakening and the nights here are frightfully cold.
   You chain your motorbike here to conserve battery charge,
   shoulder your bag and turn to face the task of making camp.^";
  return 2;
];

Include ">smartcantgo.h";

Class Room
 with link_data 0 0 0,
      cant_go [; SmartCantGo(); ]
 has scored;

Class Outside
 with class Room,
! with add_to_scope sun, ! doesn't work - use found_in instead
 has transparent light;

Class Inside
 with class Room,
 has concealed light;

Outside Town "Town"
 with name 'street' 'town' 'settlement',
 description "Once a farming settlement, the buildings here are the ruined shells of simple dwellings. Most of the roofs caved in centuries ago, but if you can find one intact it's still your best bet for staying warm overnight. The street continues south towards a square and the main road stretches out of town to the north-east.",
 ne_to "You wearily survey the road you arrived on as it tails into the distance. An old billboard stands at the side of the road leading into town.",
 out_to "You wearily survey the road you arrived on as it tails into the distance. An old billboard stands at the side of the road leading into town.",
 s_to Square,
 has enterable;

Object board "billboard" Town
 with name 'old' 'bulletin' 'billboard' 'board' 'writing' 'hoarding' 'advertisement',
 description "Whatever was on the billboard peeled off long ago and it is now host to a veritable bulletin board of writing from visitors.",
 scenic 'discarded' 'dried' 'markers' 'marker' 'pens' 0 "The pens are all dried up and impossible to write with."
        'drift' 'drifts' 0 "Uninteresting dust, not even deep enough to dig.",
 before [;
  Read: if (FlagOff(SEENJERU)) score = score + 5; SetFlag(SEENJERU);
  "Much of what has been written is in an old language you recognise as English, but there is some modern Arabic as well. From what you can read, you aren't the first person travelling this route to Jerusalem for answers.";
  Search: "You smile wryly; searching in the digital sense wouldn't be possible because the Internet is a thing of the past. You don't notice any familiar names without reading it in full.";
  LookUnder: "Just drifts of dust from the road and discarded dried up marker pens.";
  Rub: "The board has lasted years - it looks like the marker pens used were good quality.";
 ],
 has scenery legible;

Outside Square "Square"
 with name 'square',
 external_name 'square',
 description "Many travellers have passed through here before you. The square is no more than a few dozen paces across surrounded by buildings, but is littered with detritus from campers. The street continues north out of town.",
 before [;
  Examine,Search: if (noun == self) {
   give Church ~concealed; !give ChurchDoors ~concealed;
   "The taller building on the east side appears to be a church. Hopefully the roof is intact.";
  }
 ],
 n_to Town,
 e_to ChurchDoors,
 in_to ChurchDoors,
 se_to "The passage beside the church is blocked by big yellow dustbins.";

Object waste "detritus" Square
 with name 'detritus' 'litter' 'waste' 'rubbish' 'garbage' 'junk' 'campers^',
 description "It's all junk - nothing serviceable.",
 before [;
  Rub: "You can't face tidying all of this rubbish.";
  Take: "It's all junk - not worth taking.";
 ],
 react_before [;
  Sleep: if (noun == self) "^Are you serious?!";
 ],
 has scenery;

Object graffiti "graffiti"
 with name 'art' 'graffiti' 'tag' 'tags' 'star' 'stars' 'crescents',
 description "I suppose you could call it art. Although it has been drawn over several times, it looks like both the ~Goats~ and the ~K-Rhyme~ gangs have tagged this town.",
 found_in Town Square,
 before [;
  Examine: if (self hasnt general) score = score + 5; give self general;
  Search: "Some stars of David and Star and Crescents have been drawn in solidarity with other visitors.";
 ],
 has scenery;

Object ChurchBuilding "church building" Square
 with name 'tall' 'taller' 'church' 'building' 'buildings' 'indoors',
 scenic 'gargoyle' 'gargoyles' 'buttress' 'buttresses' 0 "This church's plain architecture has nothing of that sort."
        'back' 'side' 'door' 'doors' 0 "The bell tower makes this end of the church look like the front, which would make the back of the church down the passage to the south-east."
 ,
 description "The church building seems to be the only one not covered in graffiti.",
 before [;
  give self ~concealed;
  Examine: SetFlag(SEENCHUR); give ChurchDoors ~concealed;
  Enter,Go: <<Enter ChurchDoors>>;
  Search: "To the south-east of the church building is a narrow passage blocked by dustbins.";
 ],
 after [;
  Examine: ChurchDoors.describe();
 ],
 has scenery concealed enterable;

Object card "bank card"
 with name 'bank' 'debit' 'credit' 'card',
 description "You wonder why you carry this around. Banks are a relic of the past.",
 article "your",
 before [;
  Examine: if (self hasnt general) score = score + 5; give self general;
  Insert,Transfer,PutOn,Drop: "You might want to hold onto that, even though you have no money in the bank at the moment.";
 ];

DirDoor ChurchDoors "church doors"
 with name 'front' 'wooden' 'church' 'door' 'doors//p' 'doorway' 'entrance' 'exit' 'portal',
 describe [;
  print "^";
  if (self has open) { self.when_open(); rtrue; }
  self.when_closed(); rtrue;
 ],
 scenic 'archivolt' 'arch' 'archway' 'tympanum' 0 "This church's plain architecture has nothing of that sort.",
 add_to_scope handles latch,
 description "The wooden doors have withstood the elements and are still solid and impassable. Their only feature is a round brass handle on each.",
 when_closed "The church doors seem to be latched shut.",
 when_open "The door to the church stands ajar.",
 e_to Church,
 w_to Square,
! door_to [;
!  if (self in Square) return Church; return Square;
! ],
! door_dir [;
!  if (self in Square) return e_to; return w_to;
! ],
 with_key card,
! found_in Square Church,
 before [;
  give self ~concealed;
  if (Ben in Church) "Ben is standing against the door. ~The least you could do is appear grateful!~ he enjoins.";
  if (action == ##Pull) print "(first taking the handle)^";
  Pull: if (self in Square && self hasnt open) "The doors don't seem to open outwards after all. Silly handles!";
  if (self in Square && self has open) <<Close self>>;
  if (self in Church && self hasnt open) "You'll have to lift the latch first.";
  "Do you intend to exit the church?";
  Push: if (self in Church && self hasnt open) "The doors don't seem to open outwards.";
  if (self in Church && self has open) <<Close self>>;
  <<Open self>>;
  Open: if (self has locked && self in Church) give self ~locked;
  if (self hasnt open) rfalse; ! continue
  if (self in Church) "Do you intend to exit the church?";
  "Do you intend to enter the church?";
  Search: self.foundlatch();
  if (player in Church) <<Examine latch>>;
  if (self hasnt open) "There is a gap between the doors. It looks like only a latch keeps the doors shut.";
  Enter: if (player in Church) give self ~enterable;
         if (player in Square) give self enterable;
  Touch: SetFlag(FELTDOOR); "The door has been looked after, perhaps was even stained this year. The edges of the doors between the handles have been worn away.";
 ],
 foundlatch [;
  if (latch has concealed) score = score + 5; give latch ~concealed;
 ],
 unlock [;
    SetFlag(UNLOCHUR);
    self.foundlatch();
    self.unlocked();
 ],
 unlocked [;
    give latch ~concealed ~locked open;
    give self ~concealed ~locked open;
    give Church transparent ~concealed; !teleportable only while open
 ],
 after [;
  Unlock: self.unlock(); print "By slotting your bank card between the doors, you manage to lift the latch. ";
  Close: give self locked; give latch ~open locked; give Church ~transparent; !teleportable only while open
  if (self in Church && self hasnt general) { score = score + 5; give self general; }
  "The doors latch shut, locking intruders out.";
 ],
 react_before [;
  Pray: if (noun == self) {
    self.unlock();
    self.describe();
    rtrue;
  }
  Listen: if (noun == self) "Silence - perfect place to sleep!";
  Sleep: if (noun == self || (noun == d_obj && player in Church)) <<Make bed>>;
 ], 
 has static concealed door openable lockable locked enterable pluralname;

Object handles "brass handles"
 with name 'old' 'tarnished' 'knob' 'knobs' 'round' 'brass' 'handle' 'handles',
 description "Round brass knobs, tarnished with age.",
 before [;
   give self ~concealed;
   if (action == ##Push or ##Pull && ChurchDoors hasnt open) rfalse;
   Turn: "The handles won't turn - they seem to be just to grip the door with.";
   PushDir: if (second == in_obj) <<Push ChurchDoors>>;
   if (ChurchDoors hasnt open) "Despite your efforts, the doors remain shut.";
   Pull: if (player in Church) "Do you intend to exit?";
   <<Open ChurchDoors>>;
   Push: if (player in Church) <<Close ChurchDoors>>;
   "Do you intend to enter?";
   Search: "From the arrangement of the holes around the handles, it looks like the door used to have a Norfolk latch, but it has been replaced.";
 ],
 has static concealed pluralname;

Object latch "latch"
 with name 'latch' 'gap' 'edge' 'edges' 'between' 'black' 'metal' 'hole' 'holes' 'bar' 'catch' 'strike' 'Norfolk' 'Suffolk',
 description "The latch mechanism on the doors is a flat black metal bar that slots down into a catch.",
 with_key card,
 before [;
   !if ((action ~= ##Open or ##Turn or ##Unlock || (action ~= ##Lock && second ~= card)) && TestScope(Square,player) && ChurchDoors has locked) "You can't open the latch that way.";
   if (action == ##Push or ##Pull && TestScope(Church,player) && ChurchDoors hasnt open) "You can't open the latch that way.";
   Lock: if (TestScope(Church,player) && self has locked) "The latch cannot be fixed into an open position.";
   <<Close ChurchDoors>>;
   Open,Turn,Unlock: if ((TestScope(Church,player) || second == card) && ChurchDoors hasnt open) {
    !if (pews == parent(player)) "You can't reach the doors from the pew.";
    ChurchDoors.unlock();
    move card to pockets;
    "You lift the latch and the door opens.";
   }
   if (ChurchDoors has open) "The latch is already open.";
   if (player in Square && second ~= card) "You cannot fit your hand between the doors.";
   ChurchDoors.unlock();
   "You lift the latch easily and the door opens.";
   Pull: if (TestScope(Church,player) && ChurchDoors has open) "Do you intend to exit?";
   Push: if (TestScope(Church,player)) <<Close ChurchDoors>>;
   Close: <<Close ChurchDoors>>;
   PushDir: if (second == u_obj && TestScope(Church,player)) <<Open ChurchDoors>>;
   "You can't open the latch that way.";
   Examine: if (player in Square) "In the gap between the doors, you can make out the shape of a latch on the other side.";
 ],
 has static concealed openable lockable locked;

Inside Church "Church"
 with name 'church' 'building' 'nave' 'sanctuary',
 description "The church is furnished with altar and pews and is quite a contrast from the mess outside. Sunlight streams in through high windows, but the room is welcomingly cool.",
 scenic 'apse' 'crypt' 'pulpit' 'confession' 'confessional' 'chandelier' 'chandeliers' 0 "There is nothing like that in this church."
        'rood' 'screen' 'aumbry' 'ambry' 'vestry' 'narthex' 'booth' 0 "There doesn't seem to be any other rooms past curtains or partitions in this church."
        'font' 'baptismal' 'pool' 'stoup' 'holy' 'basin' 'sink' 0 "There is no water, holy or otherwise, to be found."
        'undercroft' 'antechamber' 'sacristy' 0 "Whatever that is, there isn't one here!"
 ,
 w_to ChurchDoors, !should be automatic
 out_to ChurchDoors, !could be automatic
 e_to "The door east from the northern semi-transept is locked.",
 before [;
  if (self hasnt general) score = score + 15; give self general;
  Search: if (noun == self) "There is precious little to see - just the yawning shadows under the pews.";
 ],
 react_before [;
  Wait: "You begin to feel even more drowsy.";
  Pray,Listen: if (noun == self or aisle or pews or nothing) "Silence - perfect place to sleep!";
 ],
 react_after [;
  Jump,JumpOn,JumpIn,JumpOver: print "Some mortar dust descends from the ceiling.^";
 ];

InsideOrOn aisle "aisle" Church
 with name 'big' 'bare' 'side' 'centre' 'center' 'central' 'aisle' 'aisles' 'walkway' 'area' 'ambulatory' 'cloister' 'arcade' 'promenade' 'northern' 'transept' 'semi-transept' 'stone' 'stones' 'porch',
 description "The only aisle is down the centre, big enough to walk two abreast.",
 ! extending the 32 max scenic property of the Church - things only visible inside
 scenic 'effigy' 'statue' 'statues' 0 "There are no graven images of man or beast in the church."
        'stairs' 0 "There is no basement entrance or way up to the bell tower without a very long ladder."
        'column' 'columns' 'beam' 'beams' 0 "The church roof seems to be made of sturdy stuff, since there are no old-fashioned columns or beams supporting it."
        'worship' 'hymn' 'book' 'pipe' 'organ' 'pipes' 'instrument' 'instruments' 'hymnbook' 'hymnal' 0 "There are no instruments for worship."
        'bible' 'bibles' 'books' 'scrolls' 0 "No bibles have been preserved here, the same as everywhere."
 ,
 before [;
  Touch,Rub: "The floor is clean but stone cold.";
  LookUnder: "There's no carpet to look under."; Dig: "You can't get your fingers between the stones.";
 ],
 react_before [;
  Sleep: if (noun == self) <<Sleep d_obj>>;
 ],
 reach_zones altar ChurchDoors,
 droponfloor true,
 includefloor true,
 has scenery transparent supporter enterable;

Object windows "windows"
 with name 'church' 'hole' 'holes' 'frame' 'frames' 'tall' 'arched' 'clerestory' 'high' 'windows' 'window' 'sunlight',
 description "Tall, arched clerestory windows let sunlight into the church, high out of reach.",
 scenic 'stained' 'colored' 'coloured' 'colourful' 'glass' 0 "You can't tell what the windows are made of from here, but they aren't coloured."
        'local' 'architecture' 0 "It's very plain, just local stone and wood.",
 found_in Square ChurchYard Church,
 before [;
  give self ~concealed;
  Examine,ThrownAt: ;
  default: "The church windows are all too high up.";
 ],
 has scenery concealed pluralname;

Object ChurchRoof "belltower"
 with name 'church' 'intact' 'roof' 'bell' 'bell-tower' 'belltower' 'tower' 'steeple' 'spire' 'vault' 'clerestory',
 description "The church roof is intact, and sports a small bell in the tower on the Square end.",
 scenic 'dome' 0 "The roof has no dome.",
 found_in Square ChurchYard Church,
 before [;
  give self ~concealed;
  Examine: ;
  ThrownAt: if (TestScope(player,Church)) <<ThrownAt noun bell>>;
  default: "You can't reach the roof.";
 ],
 has scenery concealed pluralname;

Object bell
 with name 'church' 'small' 'dull' 'brass' 'bell' 'bells' 'knot' 'knotted' 'dangling' 'swaying' 'rope' 'cord' 'bellcord' 'chime' 'peal' 'alarm' 'signal' 'knell' 'toll' 'clang' 'ding' 'dong',
 short_name [;
  if (TestScope(player,Church)) print "bellcord";
  else print "bell";
  rtrue;
 ],
 description "A small dull brass bell rests in the tower above the Square.",
 found_in Square ChurchYard Church,
 number 0,
 before [;
  give self ~concealed;
  Cut: if (second == nothing) "What do you want to cut the rope with?";
  print_ret "You try in vain to saw the rope with ",(the) second,".";
  Swing,Climb: "You're too stiff from the ride.";
  Push: "(the bellcord)^The rope sways.";
  PushDir: if (second ~= u_obj) "The rope isn't long enough.";
  Turn,Take,Pull,ThrownAt: if (player notin Church or aisle && action ~= ##ThrownAt) "You can't reach it.";
  self.number++; print "Ding!^";
  Ben.hears_sound(); rtrue;
  Open,Close: "The giant knot has been glued - someone got tired of people undoing it!";
  Search: <<Examine self>>;
  Listen: if (self.number > 0) "It's hard to tell if the bell is still vibrating, or if it's just you.";
 ],
 react_before [;
  Climb: if (noun == u_obj) <<Climb bell>>;
 ],
 react_after [;
  Examine: if (noun == self or u_obj or windows && player in Church or aisle or pews) print "A rope hangs down from the ceiling with a knot at the end.^";
 ],
 has scenery concealed openable;

InsideOrOn pews "pews" Church
 with name 'plain' 'wooden' 'narrow' 'pew' 'pews' 'seat' 'seats',
 description "Plain wooden benches welded to the ground - too narrow to sleep on.",
 scenic 'shadow' 'shadows' 0 "Of greater interest are the objects casting the shadows.",
 before [;
  Kiss: "You feel awkward kissing a surface where many posteriors have been.";
  Touch,Rub: "The surface is smooth and inviting. You aren't worried about getting splinters.";
  LookUnder: if (cushions has general) rfalse;
  if (cushions has concealed) score = score + 5;
  give cushions ~concealed; "Under each pew are small cushions.";
 ],
 react_after [;
  Enter:
   if (self hasnt general) print "You heave a sigh of relief to have a place to sit at a proper height. Still, you decide the pews aren't wide enough to sleep on.";
   if (self hasnt general) score = score + 5;
   give self general;
   if (cushions has concealed) print " As you unconsciously lean forward to stretch your back, you notice something underneath. ";
   !rtrue;
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  JumpOn,JumpIn: if (noun == self) print "Glancing around first, you summon the energy to jump onto a pew. Miraculously, it holds your weight. ";
  Sleep: if (noun == self) "^The pews are alright to sit on, but not ideal to sleep on.";
  Listen: if (noun == self && self == parent(player)) "The pew creaks.";
 ],
 limittake true,
 droponfloor false,
 includefloor false,
 has scenery supporter enterable transparent pluralname;

Object cushions "cushions" Church
 has concealed supporter enterable pluralname
 with name 'small' 'wool' 'woolen' 'woollen' 'embroidered' 'designs' 'prayer' 'kneeling' 'cushion' 'cushions' 'church^s', ! Genitive (of ) not supported
 description "The kneeling cushions for prayer have simple designs embroidered in wool on the surface, none with discernable text.",
 before [;
  PushDir,Take: "There are too many cushions to do that.";
  Pull,Push: give self general ~concealed;
  "You move the cushions away from underneath the pews.";
  Enter: "They aren't wide enough to sleep on.";
  Receive: move noun to location;
  print_ret (The) noun, " tumbles from the soft surface to the floor.";
  Taste: "The wool against your teeth makes you shiver unpleasantly.";
 ],
 react_before [;
  Sleep: if (noun == self) "Nowhere near ideal.";
  Pray: if (noun == self) {
   give self ~concealed;
   "You feel awkward praying when Christ has already returned, but you're so drowsy you figure it might help you sleep.";
  }
 ];

Object altar "altar" Church
 has static concealed supporter enterable
 with name 'altar' 'stone' 'table' 'alter' 'unembellished' 'bare' 'chancel' 'presbytery',
! parse_name [ i word; ! presence of parse_name forces disambiguation
!  if (parser_action == ##TheSame) return -2;
!  for (::i++) {
!   word=NextWord();
!   if (~~WordInProperty(word,self,name)) return i;
!  }
! ],
 description "What you assume to be the altar is a bare, unembellished stone table. Any cloth, cross or other religious artefacts seem to have been removed for safekeeping.",
 before [;
  give self ~concealed;
  Sleep,Touch,Rub,Climb,Enter,Push,Pull: 
  if (self hasnt general) score = score + 5; give self general;
  give altarlegs ~concealed;
  "As you put your weight on the altar, it wobbles. If the legs aren't all the same length, you might as well sleep on the floor.";
  LookUnder: <<Examine altarlegs>>;
 ],
 react_before [;
  Sleep: if (noun == self && self has general) "Nowhere near ideal.";
  JumpOn,JumpOver: if (noun == self) "The altar is too high to jump onto. Perhaps climbing would be less ambitious.";
  Pray: if (noun == self or nothing) "Silence - perfect time to sleep!";
 ];

Object altarlegs "altar legs" Church
 has scenery concealed pluralname
 with name 'altar' 'stone' 'table' 'alter' 'leg' 'legs' 'bare' 'unembellished',
 parse_name [ i word; ! presence of parse_name forces disambiguation
  if (parser_action == ##TheSame) return -2;
  for (::i++) {
   word=NextWord();
   if (~~WordInProperty(word,self,name)) return i;
  }
 ],
 description "Stubby stone legs protrude from the bottom of the altar. They are high enough off the ground to allow the altar to wobble, but not high enough for anything to go underneath.",
 before [;
  give self ~concealed;
 ];

Object bins "bins"
 with name 'big' 'yellow' 'bin' 'bins' 'can' 'cans' 'trash-can' 'trash-cans' 'trashcan' 'trashcans' 'dustbin' 'dustbins' 'garbage-cans' 'narrow' 'passage' 'alley' 'alleyway',
 description "At the south-east side of the church is a group of bins, some more pungent than others.",
 article "a passage full of",
 found_in Square ChurchYard,
 before [;
  Receive: <<Drop noun>>;
  LetGo,Touch,Rub,Enter: "^Are you serious?!";
  Enter,Climb: "You balk at the idea of falling into the open bins.";
  Push,Pull: if (FlagOff(SHOUTED)) "You don't have any pressing reason to shift bins around, just yet.";
  if (se_obj.number == 3) "The bins are already out of the way.";
  if (se_obj.number == 2) {
   print "You heave the last bin aside. ";
   give ChurchYard ~concealed transparent;
   Square.se_to = ChurchYard;
  }
  else print "You heave a bin aside. ";
  se_obj.number++;
  <<Smell bins>>;
  Smell: switch (se_obj.number) {
   0: "The bins smell like composted organic material.";
   1: "The bins smell more pungent here.";
   2: "The bins here smell fresh, like vegetable peel.";
   3: "The bins further from the square seem to have been filled more recently.";
  }
  PutOn,Transfer,Insert,Take: "The full bins don't appear to have any further use.";
  Open: "The bins don't have any lids.";
  Close: "You don't have any bin lids.";
 ],
 react_before [;
  Sleep: if (noun == self) "^Are you serious?!";
  JumpOn,JumpOver: if (noun == self) "The bins are too high to jump onto. Perhaps climbing would be less ambitious.";
  Listen: if (noun == self && Ben hasnt general) {
   SetFlag(SHOUTED); "Definitely breathing.";
  }
 ],
 has static concealed enterable container openable open pluralname;
! cannot be a supporter unless I get a library for supporter-containers.

Object rubbish "rubbish" bins
 with name 'pungent' 'smelly' 'content' 'contents' 'rotten' 'decomposing' 'rubbish' 'trash',
 article "the",
 description "The contents of the bins are still decomposing."
 has proper;

Outside ChurchYard "Churchyard"
 with name 'churchyard' 'bare' 'yard',
 description "The bare yard behind the church is strewn with tufts of weeds.",
 scenic 'door' 'side' 'back' 'northern' 'transept' 'semi-transept' 0 "The door looks formidably thick and built to last."
        'grass' 'lush' 'weed' 'weeds' 'tuft' 'tufts' 0 "You don't feel green-fingered right now."
        'mound' 'boggy' 'lush' 'bog' 'marshy' 'marsh' 'marshland' 'swamp' 'swampy' 'edge' 0 "It's only boggy near the yard's edge, where Ben probably throws out waste water."
 ,
 sw_to Square,
 n_to GardenGate,
 nw_to "The side door to the church is locked.",
 w_to "The side door to the church is locked.",
 s_to "The mound to the south is oddly lush with grass and slightly boggy.",
 has concealed ~transparent;

DirDoor GardenGate "gate"
 with name 'garden' 'gate' 'fence',
! parse_name [ i word; ! disambiguate 'garden'
!  if (parser_action == ##TheSame) return -2;
!  word = NextWord();
!  if (word == 'garden') {
!    word = NextWord(); i++;
!    if (~~word) return action_to_be ~= ##Examine;
!  }
!  for (::i++) {
!   if (~~WordInProperty(word,self,name)) return i;
!   word = NextWord();
!  }
! ],
 description "A gate in the fence to the north leads into a sizeable vegetable garden.",
 scenic 'food' 'Ben^s' 'vegetable' 'vegetables' 'fruit' 'veg' 'veggies' 'crop' 'crops' 'healthy' 0 "The fruit near the fence doesn't look ripe."
        'garden' 'allotment' 'vegetable' 'gated' 'veg' 'veggie' 'orchard' 'bed' 'beds' 'fertile' 'plant' 'plants' 'healthy' 0 "The garden is unusually fertile and brimming with healthy crops."
 ,
 s_to ChurchYard,
 n_to thedark,
 before [;
  Enter,Climb: "You're too weary from shifting bins to poke around in the garden.";
  Unlock,Open: "The gate is too stiff. Perhaps there is a knack to it.";
 ],
 react_before [;
  JumpOn,JumpOver: if (noun == self) "The gate is too high to jump onto. Perhaps climbing would be less ambitious.";
 ],
 has scenery openable lockable locked door;

InsideOrOn can "upturned can" ChurchYard
 with name 'upturned' 'can' 'tin' 'empty' 'wood-stain' 'stain' 'paint' 'makeshift' 'seat',
 description "The can is upside down, but it looks like a wood stain tin.",
 !initial "Ben is here, sitting on an upturned paint can.",
 before [;
  if (action ~= ##Examine && self == parent(Ben)) "You can't get near while Ben is sitting on it.";
  Take,Push,Pull,PushDir: "You'd rather not move the can in case Ben wants to sit down again.";
  Squeeze: if (self == parent(player)) "You're too stiff from the ride."; 
  Enter: "You decide Ben's makeshift seat is only suitable for someone more sprightly."; 
  Rub: "The tin is hopelessly stained, and doesn't make a very good seat either.";
  Smell,Taste:
    if (self == parent(player)) "You're too stiff from the ride.";
    "Yuck!";
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  Go: if (self == parent(player) && noun == d_obj) <<Exit self>>;
  Sleep: if (noun == self || (noun == nothing && self == parent(player))) "Nowhere near ideal.";
 ],
 limittake false,
 droponfloor true,
 includefloor true,
 has static supporter enterable;

InsideOrOn bike "motorbike" Town
 with name 'motorbike' 'bike' 'electric' 'ride' 'vehicle' 'bicycle' 'motorcycle' 'standard',
 description "It's a standard electric motorbike, and your ticket to finding the City of Peace.",
 initial "Your bike stands chained here.",
 scenic 'wheel' 'wheels' 'alloy' 'chassis' 'throttle' 'pedal' 'pedals' 'handles' 'handlebars' 0 "The bike is made of some new-fangled alloy you don't fully understand."
        'tyre' 'tyres' 0 "The tyres are made of a highly viscous synthetic polymer."
 ,
 before [;
  Take: "The bike is much too large and heavy for you to carry, and there's no need to wheel it along anywhere right now.";
  Push,Pull,PushDir: "You decide to leave the bike here until you've found a place to stay the night.";
  Squeeze,LookUnder: if (self == parent(player)) "You're too stiff from the ride."; 
  Lock: "The bike is already chained up.";
  Unlock,Untie,SwitchOn: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
  Taste:
    if (self == parent(player)) "You're too stiff from the ride.";
    "Yuck!";
  Touch: "The bike is still hot from being out in the sun.";
  Rub: "You touch the bike, but there is no dust or grease on the surface.";
  Search: give battery ~concealed; give chain ~concealed;
 ],
 after [;
  Examine: <<Search self>>;
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  PutOn,Transfer,Insert: if (noun == self) "It's best to keep the bike out of sight for now.";
  Go: if (self == parent(player) && noun == d_obj) <<Exit self>>;
  Sleep: if (noun == self || (noun == nothing && self == parent(player))) "Nowhere near ideal.";
  Pray: if (noun == self) "You pray fervently for the strength to continue your journey, but the motorbike remains unmoved.";
  Listen: if (noun == self) "Silence - the wonders of electricity.";
 ],
 limittake true,
 droponfloor true,
 includefloor false,
 has light static supporter enterable switchable lockable; !female if animate

Object battery "battery" bike
 has concealed
 with name 'battery',
 description "There should be enough charge to finish your journey tomorrow, unless you change your mind before then.",
 scenic 'contacts' 'terminals' 'electricity' 'wire' 'wires' 'component' 'components' 'engine' 'motor' 0 "The battery terminals and other components aren't exposed.",
 before [;
  Take: "The sealed battery unit is clipped securely into the bike, and is wedged in too tightly to remove. You've learned to camp without the need for that much juice anyway.";
  Search,Open,Touch,Taste: "Lucky the contacts aren't exposed!";
  Attack: "A flat battery is the last thing you need.";
 ],
 after [;
  give self ~concealed;
 ];

Object chain "chain" bike
 has concealed lockable openable locked
 with name 'chain' 'lock' 'security' 'wheel',
 description "The chain is not the most sturdy brand, and the bike is not even chained up to anything. Thankfully there's no-one about.",
 before [;
  Open,Take,Unlock,Untie: "You don't have the energy or inclination to carry on your journey without a good night's sleep.";
  Pull: "The security lock clanks coldly against the wheel.";
 ],
 after [;
  give self ~concealed;
 ];

Book papers "pile of papers" bag
 has legible openable
 with name 'pile' 'paper' 'papers' 'notes' 'journal' 'file' 'pages' 'straps',
 parse_name [ w n;
  w = NextWord();
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  if (w == 'of') { n++; w = NextWord(); }
  while (WordInProperty(w,self,name)) { n++; w = NextWord(); }
  return n;
 ],
 !invent [; if (inventory_stage == 1) rtrue; rfalse; ], ! hiding crashes Z-Machine
 description "In addition to your journal is a pile of various notes you have collected.",
 before [;
  if (action == ##Read or ##Consult or ##Search && parent(player) ~= pews) "First priority is to find a place to rest.";
  if (action == ##Read or ##Consult or ##Search && self hasnt open) "The journal is bound shut with bulging elastic straps.";
  Take: if (parent(player) ~= pews) "First priority is to find a place to rest.";
  Read: "The first page of your journal begins:^Research topics / article ideas (year):^
        Calendar dates - does history matter any more? (863)^
        Inking - ancient printing revised for the modern era (868)^
        Goat psychology - eyewitnesses and ~left behind~ syndrome (877)^
	Sola Scriptura - what the Bible might have said (952)^
        Final solutions - flooding the world with clean water (986)^
        Abysmal release - devillish designs for humanity (993)^
        God incarnate - what is love?^
        ^No number has been written for the last entry.";
  Search: "There's too many pages to rifle through, but you could look something up.";
  Open,Push,Pull: if (parent(player) ~= pews) "Not standing here. You don't want to have to chase any pages that might fall out.";
  if (self hasnt general) score = score + 5; give self general;
  if (self has open) rtrue; ! default Push/Pull if open??
  give self open;
  "You carefully undo the straps that wrap up your notes and bind your journal closed.";
  Transfer,Insert,PutOn,Drop: if (parent(self) ~= bag) { give self ~open; move self to bag;
   "You place the papers gently back in your bag. You don't want to lose any pages accidentally.";
  }
  LookUnder: "The back of your journal is stuffed full of loose pages that you plan to read later. The reverse of the back page is blank, besides a few smudges from your inky fingers due to being the lowest in the pile.";
 ],
 after [;
  Examine: if (parent(player) ~= pews) print "They are far too interesting to give a single glance. You resolve to read them once you have taken the weight off your legs.^";
 ];

Object roofs "roofs"
 with name 'roof' 'roofs' 'rooves' 'collapsed' 'caved' 'rubble' 'stone' 'stones' 'thatch',
 description "The rubble is impassable and would make a terrible place to sleep.",
 found_in Town Square,
 before [;
  Take: "The shifted rubble sends up a plume of dust and you toss it back, eyes watering. It wouldn't make for very good bedding material.";
  Open,Push,Pull: "There's no use. You'd rather sleep in the open than shift rubble about, so you press on, hoping for a clean space to camp.";
  Search,LookUnder:
    if (bike == parent(player)) "You can't reach the roofs from the bike."; !outofrch.h
    "The hopes of scavenging anything are slim, and the allure can wait until morning when you're more fresh.";
 ],
 has scenery pluralname;

Object buildings "various buildings"
 with name 'ruins' 'ruined' 'building' 'buildings' 'wall' 'walls' 'shells' 'simple' 'dwellings' 'rooms' 'abandoned' 'roofed' 'structure' 'structures' 'doorways' 'various' 'houses',
 description "None of the dwellings here appear to be inhabitable.",
 found_in Town Square,
 before [;
  Climb,JumpIn,JumpOn,Enter: <<Examine roofs>>;
  Examine,Search: if (location == Square) <<Search Square>>;
 ],
 has scenery pluralname enterable;

InsideOrOn road "road"
 with name 'main' 'road' 'track' 'tracks' 'trail' 'dust' 'dusty' 'path' 'tar' 'tarmac',
 description "The road is now no more than a dusty trail, though in the bike tracks you can see that the surface was tarred to a good standard when it was built.",
 found_in Town,
 before [;
  Taste:
    if (bike == parent(player)) "You're too stiff from the ride to reach down from the motorbike.";
    "Yuck!";
  Touch,Rub:
    if (bike == parent(player)) "You're too stiff from the ride to reach down from the motorbike.";
  LookUnder: "You'd have to dig a hole first."; Dig: "You'd need more than a shovel to dig road tar.";
 ],
 react_before [;
  if(self.InsideOrOn::react_before()~=0) rtrue;
  Sleep: if (noun == self || (noun == nothing && self == parent(player))) "Nowhere near ideal.";
 ],
 limittake false,
 droponfloor true,
 includefloor true,
 has scenery concealed supporter enterable;

Object sun "sun"
 has scenery
 with name 'sun' 'evening' 'sunset' 'sun-set' 'setting',
 article "the",
 found_in [; return (location ofclass Outside); ],
 description "There is still enough daylight to find a more suitable spot to settle.",
 before [;
  Make,Examine,Listen,Worship: ;
  default: "You can't reach it.";
 ],
 react_before [;
  Wait: print_ret (string) self.description;
  Sleep: if (noun == self) <<Make bed>>;
  Pray,Listen: if (noun == self) "The sun warms you silently.";
 ];

Object camp "campfire"
 has scenery concealed
 with name "camp" "shelter" "fire",
 article "a",
 description "You don't have any wood. You'll need to find an abandoned building or roofed structure to keep warm during the night.",
 react_before [;
  SwitchOn,Burn: if (self == noun or second) print_ret (string) self.description;
  default: if (action ~= ##Make && self == noun or second) "You haven't made a camp yet. You hope to shelter indoors.";
 ];

Object bed "bed"
 has scenery concealed
 with name "bed" "sleeping" "tent",
 article "a",
 description "All you have is a sleeping bag, but that won't keep you warm out in the open.",
 react_before [;
  default: if (action ~= ##Make && self == noun or second) "You haven't made a bed yet.";
 ];

Class Man
 has male animate proper
 class Character
 with qseqstates 0 0,
 life [;
  Answer: NotTalkSub(); rtrue;
  Order:  NotTalkSub(); rtrue;
 ],
 react_before [;
  if (self in ChurchYard or can && action == ##Go or ##Look && noun == w_obj) {
   ChurchDoors.foundlatch();
   print "~Lost the key to that door years ago, so we just jimmy the latch now.~ quips Ben. ";
  }
  if (self in ChurchYard or can && action == ##Go or ##Look && noun == s_obj)
  print "~I wouldn't tread there unless you're on important business.~, Ben says, with a smirk. ";
 ],
 before [;
  TalkTo: self.select(1); rtrue; ! 1, because Quip #1
 ],                              ! is the main menu.
 quip [ a b; switch (a) {
      ! Quip #1: Main menu
      11: ! Main menu: no quip name needed
      12: ! Main menu: no reply needed
      13: qtype = MainMenu;
          killz = true;
      14: ! Here's where we define all the options that are
          ! ever available from the main menu. For an 
          ! explanation of this syntax, consult the comments
          ! at the beginning of Gtalk.h, specifically Step 5.
          return Qlist(b,   1,  ! number of quips in this list
                            2); ! Quip #2
      ! Quip #2
      21: "~Hi there, who are you?~";
      22: self.qoff(2);
          "~I'm ", (the) self, ".~"; 
 } rfalse; ];

Man Ben can
 class followclass
 has ~proper
 with name 'old' 'man' 'ben' 'person' 'priest' 'vicar',
 short_name "old man",
 description "Ben is a tanned man with grubby clothes and a shock of white hair.",
 before [;
  ! select(1), because Quip #1 is the main menu.
  TalkTo: self.select(1); rtrue;
 ],
 each_turn [;
  SetPronoun('him', self);
  if (self hasnt general) {
   ! initiate conversation after room description with "old man"
   self.select(1);
   give self general proper;
   self.short_name = "Ben";
   ! enable idle options
   if (FlagOn(HEARDSON)) self.qon(33);
   else self.qon(19);
   self.qon(34, 35, 37);
  }
 ],
 hears_sound [;
  if (self hasnt general) {
   SetFlag(SHOUTED);
   "~Yoohoo!~. It sounds like it's coming from behind the church.";
  }
 ],
 number 0,
 daemon [;
  !proof of concept goal-seek
  !0 objectnumber = disallow following, 0 destination = remove NPC
  !blind Ben won't follow the player to unfamiliar area at first...
  !need a way to simulate impatience/follow/going back to fetch you!
  !should cope with player "going on ahead"
  switch (self.number) {
   0: MoveNPC(Ben, ChurchYard, ##Exit, can); self.number++;
      if (player in ChurchYard)
       "^Ben rises to his feet and ambles towards the bins.";
   1: MoveNPC(Ben, Square, ##Go, sw_obj); self.number++;
      if (player in ChurchYard)
       "^Ben starts heading around the side and gestures to come with him.";
      else if (player in Square)
       "^Ben gropes along around the church, avoiding the bins.";
   2: move Ben to Square; self.number++;
      if (player in ChurchYard or Square)
       print "^Ben gropes along around the corner of the church";
      if (player in ChurchYard) print " and disappears from view";
      ".";
   3: self.number++;
      ChurchDoors.unlocked();
      if (player in Square && ChurchDoors hasnt open) {
       MoveNPC(Ben, Church, ##Go, e_obj);
       print "^Ben procures a thin rod from his person to unlatch the church doors and beckons you inside.";
      }
      else if (player in Square && ChurchDoors has open) {
       MoveNPC(Ben, Church, ##Go, e_obj);
       print "^Ben feels the open door and winks slyly. ~It's not secure, but there's not many that come at once. You'll be warm in here.~ He bids you enter.";
      }
      else if (player in Church or pews or aisle && ChurchDoors hasnt open) {
       print "^Ben unlatches the church doors, squints inside and enters. ~Not very secure, as you can see. You'll be warm in here though.~";
      }
      else if (player in Church && ChurchDoors has open) {
       print "^Ben appears at the doors and surveys the room. ~Found your way in I see. You'll be warm in here.~";
      }
   4: if(player notin Square or Church or pews or aisle) rfalse;
      self.number++;
      if (player in Square) {
       MoveNPC(Ben, Church, ##Go, e_obj);
       "^Ben gestures to follow and enters the church.";
      }
      else {
       move Ben to Church;
       print "^Ben follows you a little into the church.";
       MoveNPC(Ben, Square, ##Go, w_obj);
       "^~I won't regale you with my past, you look tired. Sleep well!~, and with that Ben disappears out of the church doors.";
      }
   5: if(Ben notin Square) {
       if(player notin Church or aisle or pews) rfalse; self.number++;
       MoveNPC(Ben, Square, ##Go, w_obj);
       "^~I won't regale you with my past, you look tired. Sleep well!~, and with that Ben disappears out of the church doors.";
      }
      self.number++;
   6: self.number++;
      MoveNPC(Ben, ChurchYard, ##Go, se_obj);
      if (player in Square)
      "^You see Ben carefully shuffling back around to the churchyard.";
   7: self.number++;
      MoveNPC(Ben, 0, ##Go, 0);
      if (player in ChurchYard)
      "^Ben slams the gate on his garden and disappears into the dense vegetation.";
  }
 ],
 quip [ a b; switch (a) {
      ! Quip #1: Main menu
      11: ! Main menu: no quip name needed
      12: ! Main menu: normally no reply needed
          if (self hasnt general) { "^~You there!?~^
          An old man is here, sitting on an upturned paint tin. From his tan, he looks local, but it's hard to tell how old he is - he could be 500.^
          He doesn't turn to face you as you arrive."; }
      13: qtype = MainMenu;
          killz = self hasnt general;
      14: ! Here's where we define all the options that are
          ! ever available from the main menu. For an 
          ! explanation of this syntax, consult the comments
          ! at the beginning of Gtalk.h, specifically Step 5.
          ! Note that if the conversation is initiated a second time,
          ! this could be a fresh list
          return Qlist(b,   22,   ! number of quips in this list
                             2, 3, 4, 5, 6)    |
                 Qlist(b-6,  7, 9,10,16,17,18) |
                 Qlist(b-12,19,20,23,30,33,34) |
                 Qlist(b-18,35,36,37,38,39);
      ! Quip #2 etc.
      21: qseq(1,"~Hi there, who are you?~","~What's your name?~");
      22: self.qoff(2); self.qon(3, 9);
          "~Ben. Just Ben.~";
      23: qtransfer = 1; ! top-level quip; return to menu by default

      31: print_ret (string) random("~Are you the vicar?~","~Are you the vicar, then?~","~You're the vicar, right?~","~Is the church yours?~");
      32: self.qoff(3); "Of sorts.";
      33: qtransfer = 1; ! top-level quip; return to menu by default
          qqon = false;

      41: qseq(2,"~What are you doing here?~","~What are you doing?~");
      42: self.qoff(4);
          if (FlagOn(HEARDSON)) {
           if (FlagOff(SEENJERU)) self.qon(30);
           "~My son and I were heading to Jerusalem.~";
          }
          else "~Pottering.~";
      43: qtransfer = 1; ! top-level quip; return to menu by default
          qqon = false;

      51: "~Are you blind?~";
      52: self.qoff(5); self.qon(6, 7); "~I prefer the term 'visually less acute'.~"; 
      53: qtransfer = 1; ! top-level quip; return to menu by default

      61: "~How visually acute are you, then?~";
      62: self.qoff(6);
          "~I get by. I'm not completely blind.~"; 
      63: qtransfer = 1; ! top-level quip; return to menu by default
          qqon = false;

      71: "~So you can see me then.~";
      72: self.qoff(7);
          "~Yes, I know someone's there, but not who.~"; 
      73: qtransfer = 1; ! top-level quip; return to menu by default
          qqon = false;

      91: qseq(3,"~Sorry, I didn't catch your name...~","~What was your name, again?~","~I've forgotten your name already.~","~Remind me of your name again.~");
      92: qcyc(4,"~It's Ben.~","~Where there's no government, there's no need for surnames. I just go by Ben.~","~The name's Ben.~","~Ben.~","~I told you, it's Ben.~"); 
      93: qtransfer = 1; ! top-level quip; return to menu by default
          qqon = false;

      101: "~Can I help you?~";
      102: "~Yes you can. I've lost my radio.~ he says, frankly."; 
      103: killz = true; ! disallow saying nothing
           killq = true; ! never say "What would you like to say?" for SubMenus
           !qtype = SubMenu; ! SubMenu is for when you haven't said anything
           qret(self, 10, 1, b);
      104: return Qlist(b,   2,   ! number of quips in this list
                            11, 12);

      ! this is a one-time chance, but should be merged into the main menu
      111: "~That's it?~";
      112: self.qoff(11);
           qret(self, 10, 1, b); !fallback is 1 (the main menu)
           if(score < 5 && self.qtest(12)) "~Yes, that's all.~ he says, stiffly. ~Can you help or not?~";
           else { SetFlag(HEARDSON); self.qon(4); "~No, I suppose not. My son hasn't returned, and the radio is the way I could reach him.~ he laments. ~It's him I'm really after.~"; }
      114: return qret(self, 10, 1, b);

      ! this could easily go in the main menu
      121: "~What does the radio look like?~";
      122: self.qoff(12); self.qon(20);
           qret(self, 10, 1, b);
           "~It's a hand-held walkie-talkie gizmo, a sort of greyish black.~"; 
      124: return qret(self, 10, 1, b);

      161: qseq(5,"~Loyal?~","~Your wife was loyal?~","~What happened to your wife?~");
      162: self.qoff(16);
           "~She got the fear of God in her. Left to find Jerusalem.~ he looks up at you.";
      163: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      171: "~You had a wife then?~";
      172: self.qoff(17); self.qon(16);
           "~No, but she was loyal.~ he gazes off for a moment.";
      173: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      181: "~Where is your son, now?~";
      182: self.qoff(18); self.qon(17);
           "~He went off one day without a word, and hasn't been back since.~ he shrugs.";
      183: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      191: "~I'm amazed you've done as well as you have.~";
      192: self.qoff(19); self.qon(18); !dependent on radio found?
           if (FlagOff(HEARDSON)) self.qon(33);
           if (FlagOff(SEENJERU)) self.qon(30);
           SetFlag(HEARDSON);
           "~Well, my son's to thank for that, or was, at least...~ he curtails, visibly emotional.";
      193: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      201: "~Do you know a way into the church?~";
      202: "~I might!~ he says, brightly. ~You want to stay in the church do you? I have rules. No candles or naked flames. No graffiti. No judgement!~"; 
      203: killz = true; ! disallow saying nothing
           killq = true; ! never say "What would you like to say?" for SubMenus
           !qtype = SubMenu; ! SubMenu is for when you haven't said anything
           qqon = false;
           qret(self, 20, 1, b);
      204: return Qlist(b,   2,   ! number of quips in this list
                            21, 22);

      211: "[Accept]";
      212: self.qoff(21, 22);
           if (FlagOn(SEENJERU)) self.qon(30);
           SetFlag(ACCEPTED);
           StartDaemon(ben);
           qret(self, 20, 0, b); !fallback is 0 (quit)
           "~Sounds alright to me.~^^~OK, come with me.~";
      214: return 0; ! no options available, quit conversation

      221: "[Reject]";
      222: self.qoff(21, 22); self.qon(23);
           if (FlagOn(SEENJERU)) self.qon(30);
           qret(self, 20, 1, b); !fallback is 1 (the main menu)
           "~Think I'll take my chances.~^^~OK, but if you change your mind, I don't want you thinking you can chop up the pews for kindling!~"; 
      224: return qret(self, 20, 1, b);

      231: "~Alright, I'll follow your rules. Let me in the church!~";
      232: self.qoff(23);
           SetFlag(ACCEPTED);
           StartDaemon(ben);
           "~OK, come with me.~";
      233: qqon = false;
      234: return 0; ! quit conversation

      301: qcyc(6,"~Why are you still here?~","~Why aren't you in Jerusalem?~");
      302: self.qoff(30);
           print "~I don't have any means of transport.~ he says, plainly.";
           if (FlagOn(HEARDSON)) " ~My son and I were heading to Jerusalem, but I was too ill to continue the journey. We stopped here, but I never recovered fully. I'm too weak to make the journey on foot, now.~";
           new_line; rtrue;
      303: killz = true; ! disallow saying nothing
           killq = true; ! never say "What would you like to say?" for SubMenus
           !qtype = SubMenu; ! SubMenu is for when you haven't said anything
           qqon = false;
           !qret(self, 30, 1, b);
      304: return Qlist(b,   6,   ! number of quips in this list
                             31, 32, 33, 34, 35) |
                  Qlist(b-12,36, 37, 38, 39);

      311: "[Invite to join you on your journey][-BATT][+FOOD]";
      312: self.qoff(31, 32); if (self hasnt general) self.qon(34, 35, 37);
           if (self hasnt general && FlagOn(HEARDSON)) self.qon(33);
           SetFlag(FOLLOW);
           StartDaemon(ben);
           qret(self, 30, FlagOn(ACCEPTED) || FlagOn(UNLOCHUR), b); !fallback is 0 (quit)
           print "~I'm heading there myself, actually. You can come with me in the morning if you like. I have a motorbike.~^^~That would be very much appreciated.~ Ben says, containing his enthusiasm. ";
           if (FlagOn(ACCEPTED) || FlagOn(UNLOCHUR)) "~I'll see you in the morning, then.~";
           "~Come with me, you can stay in the church overnight.~";
      314: return qret(self, 30, FlagOn(ACCEPTED) || FlagOn(UNLOCHUR), b);

      321: "[Hold off until you trust him] ~What a shame.~";
      322: self.qoff(31, 32); if (self hasnt general) self.qon(34, 35, 37);
           if (self hasnt general && FlagOn(HEARDSON)) self.qon(33);
           qret(self, 30, 1, b);
           if (FlagOn(HEARDSON)) "~I hope that's where he is now. It can't have been easy on him staying here.~ he sighs."; 
           "~Indeed.~ Ben raises his eyebrows and purses his lips.";
      324: return qret(self, 30, 1, b);

      331: "~How long has your son been gone?~";
      332: self.qoff(33);
           qret(self, 35, 1, b);
           "He pauses. ~One season or so.~"; 
      333: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      341: "~How long have you been here?~";
      342: self.qoff(34);
           if (FlagOff(HEARDSON)) self.qon(19); !stepping stone to 30 and 33
           qret(self, 35, 1, b);
           "~Since the seven hundreds. I barely know what year it is any more.~ he mumbles."; 
      343: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      351: "~How often do you see visitors?~";
      352: self.qoff(35); self.qon(36);
           qret(self, 30, 1, b);
           "~One to two people swing by, every year.~"; 
      353: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      361: qseq(7,"~Is that a lot?~","~Is it common then, to see people passing through?~");
      362: self.qoff(36);
           "~No, no, it's rare people come this way. Something's put the fear of God into them!~ he jokes."; 
      363: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      371: "~Do you have batteries?~";
      372: self.qoff(37); self.qon(38, 39);
           "~Yes, I have some inside. About 100 farads.~"; 
      373: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      381: qseq(7,"~That's...not a lot.~","~Not much power, then.~","~You don't have much electricity.~");
      382: self.qoff(38);
           print "~It's all I need here.";
           if (FlagOn(FOLLOW)) " I guess it won't help with your bike much, will it?~ he suggests."; 
           " I guess it won't help with fuel much, will it?~ he suggests."; 
      383: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;

      391: qseq(8,"~How do you charge them?~","~How do your charge your batteries?~");
      392: self.qoff(39);
           "~Bio-energy. There's not a lot of other natural resources.~ he remarks."; 
      393: qtransfer = 1; ! top-level quip; return to menu by default
           qqon = false;
 } rfalse; ];
