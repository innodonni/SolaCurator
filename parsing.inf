Replace Refers; !provided by GoNeighbour.h
Replace NounDomain; !bugfix
#Include "parser";

[ NounDomain domain1 domain2 context    first_word i j k l
					answer_words;
    #Ifdef DEBUG;
    if (parser_trace >= 4) {
	print "   [NounDomain called at word ", wn, "]^";
	print "   ";
	if (indef_mode) {
	    print "seeking indefinite object: ";
	    if (indef_type & OTHER_BIT)  print "other ";
	    if (indef_type & MY_BIT)     print "my ";
	    if (indef_type & THAT_BIT)   print "that ";
	    if (indef_type & PLURAL_BIT) print "plural ";
	    if (indef_type & LIT_BIT)    print "lit ";
	    if (indef_type & UNLIT_BIT)  print "unlit ";
	    if (indef_owner ~= 0) print "owner:", (name) indef_owner;
	    new_line;
	    print "   number wanted: ";
	    if (indef_wanted == 100) print "all"; else print indef_wanted;
	    new_line;
	    print "   most likely GNAs of names: ", indef_cases, "^";
	}
	else print "seeking definite object^";
    }
    #Endif; ! DEBUG

    match_length = 0; number_matched = 0; match_from = wn; placed_in_flag = 0;

    SearchScope(domain1, domain2, context);

    #Ifdef DEBUG;
    if (parser_trace >= 4) print "   [NounDomain made ", number_matched, " matches]^";
    #Endif; ! DEBUG

    wn = match_from+match_length;

    ! If nothing worked at all, leave with the word marker skipped past the
    ! first unmatched word...

    if (number_matched == 0) { wn++; rfalse; }

    ! Suppose that there really were some words being parsed (i.e., we did
    ! not just infer).  If so, and if there was only one match, it must be
    ! right and we return it...
    if (match_from <= num_words) {
	if (number_matched == 1) {
	    i=match_list-->0;
	    if (indef_mode) {
		if ((indef_type & LIT_BIT) && i hasnt light) rfalse;
		if ((indef_type & UNLIT_BIT) && i has light) rfalse;
	    }
	    return i;
	}

	! ...now suppose that there was more typing to come, i.e. suppose that
	! the user entered something beyond this noun.  If nothing ought to follow,
	! then there must be a mistake, (unless what does follow is just a full
	! stop, and or comma)

	if (wn <= num_words) {
	    i = NextWord(); wn--;
	    if (i ~=  AND1__WD or AND2__WD or AND3__WD or comma_word
		   or THEN1__WD or THEN2__WD or THEN3__WD
		   or BUT1__WD or BUT2__WD or BUT3__WD) {
		if (lookahead == ENDIT_TOKEN) rfalse;
	    }
	}
    }

    ! Now look for a good choice, if there's more than one choice...

    number_of_classes = 0;

    if (match_length == 0 && indef_mode && indef_wanted ~= 100)
	number_matched = 0;  ! ask question for 'take three'
    if (number_matched == 1) i = match_list-->0;
    if (number_matched > 1) {
	i = Adjudicate(context);
	if (i == -1) rfalse;
	if (i == 1) rtrue;       !  Adjudicate has made a multiple
				 !  object, and we pass it on
    }

    ! If i is non-zero here, one of two things is happening: either
    ! (a) an inference has been successfully made that object i is
    !     the intended one from the user's specification, or
    ! (b) the user finished typing some time ago, but we've decided
    !     on i because it's the only possible choice.
    ! In either case we have to keep the pattern up to date,
    ! note that an inference has been made and return.
    ! (Except, we don't note which of a pile of identical objects.)

    if (i ~= 0) {
	if (dont_infer) return i;
        if (indef_mode && indef_possambig && number_matched == 0) { wn++; rfalse; }
	if (inferfrom == 0) inferfrom=pcount;
	pattern-->pcount = i;
	return i;
    }

    ! If we get here, there was no obvious choice of object to make.  If in
    ! fact we've already gone past the end of the player's typing (which
    ! means the match list must contain every object in scope, regardless
    ! of its name), then it's foolish to give an enormous list to choose
    ! from - instead we go and ask a more suitable question...

    if (indef_mode && indef_possambig && number_matched == 0) { wn++; rfalse; }

    if (match_from > num_words) jump Incomplete;
    return AskPlayer(context);

    ! Now we come to the question asked when the input has run out
    ! and can't easily be guessed (eg, the player typed "take" and there
    ! were plenty of things which might have been meant).

  .Incomplete;

    if (best_etype == NOTHING_PE && pattern-->1 == 0) rfalse; ! for DROP when empty-handed
    if (context == CREATURE_TOKEN) L__M(##Miscellany, 48, actor);
    else                           L__M(##Miscellany, 49, actor);

    #Ifdef TARGET_ZCODE;
    for (i=2 : i<INPUT_BUFFER_LEN : i++) buffer2->i = ' ';
    #Endif; ! TARGET_ZCODE
    answer_words = Keyboard(buffer2, parse2);

    first_word = WordValue(1, parse2);
    #Ifdef LanguageIsVerb;
    if (first_word == 0) {
	j = wn; first_word = LanguageIsVerb(buffer2, parse2, 1); wn = j;
    }
    #Endif; ! LanguageIsVerb

    ! Once again, if the reply looks like a command, give it to the
    ! parser to get on with and forget about the question...

    ! Once again, if the reply looks like a command
    ! (that is, VERB ... or XXX,VERB ...), give it to the parser to get
    ! on with and forget about the question...

    if (first_word) {
	if ((first_word->#dict_par1) & DICT_VERB) {
	    CopyBuffer(buffer, buffer2);
	    return REPARSE_CODE;
	}
	if (NumberWords(parse2) > 2) {
	    j = WordValue(2, parse2);
	    k = WordValue(3, parse2);
	    if (j == ',//' && k && (k->#dict_par1) & DICT_VERB) {
		CopyBuffer(buffer, buffer2);
		return REPARSE_CODE;
	    }
	}
    }

    ! ...but if we have a genuine answer, then:
    !
    ! (1) we must glue in text suitable for anything that's been inferred.

    if (inferfrom ~= 0) {
	for (j=inferfrom : j<pcount : j++) {
	    if (pattern-->j == PATTERN_NULL) continue;
	    i = WORDSIZE + GetKeyBufLength();
	    SetKeyBufLength(i-WORDSIZE + 1);
	    buffer->(i++) = ' ';

	    #Ifdef DEBUG;
	    if (parser_trace >= 5) print "[Gluing in inference with pattern code ", pattern-->j, "]^";
	    #Endif; ! DEBUG

	    ! Conveniently, parse2-->1 is the first word in both ZCODE and GLULX.

	    parse2-->1 = 0;

	    ! An inferred object.  Best we can do is glue in a pronoun.
	    ! (This is imperfect, but it's very seldom needed anyway.)

	    if (pattern-->j >= 2 && pattern-->j < REPARSE_CODE) {
		! was the inference made from some noun words?
		! In which case, we can infer again.
		if ((WordValue(NumberWords())->#dict_par1) & DICT_NOUN) continue;
		PronounNotice(pattern-->j);
		for (k=1 : k<=LanguagePronouns-->0 : k=k+3)
		    if (pattern-->j == LanguagePronouns-->(k+2)) {
			parse2-->1 = LanguagePronouns-->k;
			#Ifdef DEBUG;
			if (parser_trace >= 5) print "[Using pronoun '", (address) parse2-->1, "']^";
			#Endif; ! DEBUG
			break;
		    }
	    }
	    else {
		! An inferred preposition.
		parse2-->1 = No__Dword(pattern-->j - REPARSE_CODE);
		#Ifdef DEBUG;
		if (parser_trace >= 5) print "[Using preposition '", (address) parse2-->1, "']^";
		#Endif; ! DEBUG
	    }

	    ! parse2-->1 now holds the dictionary address of the word to glue in.

	    if (parse2-->1 ~= 0) {
		k = buffer + i;
		#Ifdef TARGET_ZCODE;
		@output_stream 3 k;
		print (address) parse2-->1;
		@output_stream -3;
		k = k-->0;
		for (l=i : l<i+k : l++) buffer->l = buffer->(l+2);
		#Ifnot; ! TARGET_GLULX
		k = PrintAnyToArray(buffer+i, INPUT_BUFFER_LEN-i, parse2-->1);
		l=l; ! suppress compiler warning
		#Endif; ! TARGET_
		i = i + k; SetKeyBufLength(i-WORDSIZE);
	    }
	}
    }

    ! (2) we must glue the newly-typed text onto the end.

    i = WORDSIZE + GetKeyBufLength();
    buffer->(i++) = ' ';
    SetKeyBufLength(GetKeyBufLength()+1);
    for (j=0 : j<GetKeyBufLength(buffer2) : i++,j++) {
	buffer->i = buffer2->(j+WORDSIZE);
	SetKeyBufLength(GetKeyBufLength()+1);
	if (i-WORDSIZE == INPUT_BUFFER_LEN-1) break;
    }

    ! (3) we fill up the buffer with spaces, which is unnecessary, but may
    !     help incorrectly-written interpreters to cope.

    #Ifdef TARGET_ZCODE;
    for (: i<INPUT_BUFFER_LEN : i++) buffer->i = ' ';
    #Endif; ! TARGET_ZCODE

    return REPARSE_CODE;

]; ! end of NounDomain

