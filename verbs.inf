Replace PraySub;
Replace SleepSub;
Replace JumpSub;
Replace JumpInSub;
Replace JumpOnSub;
Include "verblib";

[ GamePreRoutine;
#Ifdef DEBUG;
 print "GamePreRoutine: action = ", action; new_line;
#Endif;
 if (action == ##Examine or ##Search && s_obj == noun or second && location == Town) "It looks like there are more buildings down in the square.";
 if (action == ##Examine or ##Search && noun in compass && ZRegion(location.(noun.door_dir))==2 or 3) return PrintOrRun(location,noun.door_dir);
 if (action == ##Jump or ##JumpOn or ##JumpIn && RunRoutines(location, react_before)~=0) rtrue; ! include location in reactions
 Answer: if (noun == player && RunRoutines(player, before)~=0) rtrue;
 default:
 rfalse;
];
[ GamePostRoutine;
 if (action == ##Jump or ##JumpOn or ##JumpIn && RunRoutines(location, react_after)~=0) rtrue; ! include location in reactions
 rfalse;
];

[ UnknownVerb word i;
  objectloop (i has transparent && i ofclass Room)
  {
    if (WordInProperty(word,i,name))
    {
      verb_wordnum=0;
      return 'go';
    }
  }
  rfalse;
];

[ TeleportScope i;
  switch (scope_stage)
    {
      1: rfalse;
      2: objectloop (i ofclass Room) {
          if (i has transparent && i hasnt concealed)
          {
           if (action_to_be == ##Teleport && i has visited)
            PlaceInScope(i);
           if (i has visited)
            ScopeWithin(i);
          }
         }
         rtrue;
      3: "That doesn't seem to be anywhere you've been.";
    }
];

[ TeleportSub rm;
  if (noun ofclass Room && noun has transparent && noun hasnt concealed)
   { print "(visiting ", (the) noun, ")^"; PlayerTo (noun, 2); rtrue; }
  rm = ScopeCeiling(noun);
  if (rm ~= nothing && rm has transparent && rm hasnt concealed && rm ofclass Room)
   { print "(finding ", (the) noun, " in ", (the) rm, ")^"; PlayerTo (rm, 2); rtrue; }
  if (noun in compass) <<Go noun>>;
];

Include "grammar";

Verb 'start' 'stop' 'change' = 'switch';
Verb 'mount' 'kneel' = 'enter';
Verb 'dismount' = 'exit';
Verb 'camp' 'kip' = 'sleep';
Verb 'lick' 'bite' = 'taste';
Verb 'hurt' 'kick' = 'hit';
Verb 'detach' 'grab' = 'take';
Verb 'unchain' = 'unlock';
Verb 'wheel' = 'push';
Verb 'dance' = 'jump';
Verb 'rifle' 'riffle' 'ransack' 'explore' = 'search';
Verb 'peek' = 'look';
Verb 'inspect' = 'examine';
Verb 'kindle' = 'burn';
Verb 'pour' = 'empty';
Verb 'grip' = 'touch';
Verb 'visit' 'travel' = 'go';

Extend 'go' first
 * scope=TeleportScope -> Teleport
 * 'near'/'nearer' 'to' scope=TeleportScope -> Teleport
 * 'near'/'nearer'/'to'/'toward'/'towards' scope=TeleportScope -> Teleport;

Extend 'examine' first
 * scope=TeleportScope -> Examine
 * noun 'to' noun=ADirection -> Examine;

Extend 'search'
 * 'through' noun -> Search;

Extend only 'check' first
 * 'in' noun -> Search;

[ MakeSub;
 if (noun ~= camp or bed) "You don't have the tools and materials for that.";
 if (location ~= Church) "This isn't an ideal spot to bed down for the night.";
 if (cushions has concealed && altar has concealed) "Ideally you would have somewhere soft to sleep.";
 score = score + 20;
 deadflag = 2;
 "This is the end of the demo. Please form an orderly queue to hand in your feedback.^
 Thank you for playing!";
]; 

Verb 'use'
 * enterable -> Enter
 * 'exit'/'entrance' -> VagueGo
 * noun -> SwitchOn;

Verb 'make'
 * noun -> Make
 * noun noun -> Make
 * noun 'in' noun -> Make
 * 'up' noun -> Make
 * noun 'up' -> Make;

Extend 'put' first
 * 'up' noun -> Make;

Attribute legible;

[ ReadSub;
  <<Examine noun>>; 
];

Extend 'read' first
 * legible -> Read
 * legible 'about' topic -> Consult;

Verb 'lift'
 * noun -> Turn
 * noun 'up' -> Push
 * noun 'with' held -> Open;

Verb 'raise' = 'lift';

[ JumpInSub; return JumpSub(); ];
[ JumpOnSub; return JumpSub(); ];
[ JumpSub act x1;
 if (noun == nothing) noun = ScopeCeiling(player);
 act = action; x1 = noun;
 if (location ~= noun && noun has enterable) <Enter noun>;
 action=act; noun=x1; ! restore values
 if (player in noun && AfterRoutines()~=0) rtrue;
 return L__M(action, 1, noun);
];

Extend 'jump'
 * 'up'/'on' 'to' noun -> Jump
 * 'to'/'onto'/'inside' noun -> Jump;

[ WinSub;
 "If only it were that easy."; 
];
Verb "win"
 * -> Win
 * topic -> Win;

! Verbs list http://www.inform-fiction.org/manual/html/tables.html#tbl6a
[ HelpSub;
 print "The following is a non-exhaustive list of commands (sufficient to finish the game):^
  GO north or just NORTH (or in, out, up, down, n, e, s, w, ne and so on)^
  SEARCH/LOOK AT/LOOK UNDER/EXAMINE (or x) something^
  INVENTORY or just INV (or i)^
  DROP/TAKE (or get) something^
  WEAR (or put on)/DISROBE (or remove) something^
  OPEN/CLOSE/LOCK/UNLOCK/TURN ON/TURN OFF (or switch) something^
  PUSH/PULL/MOVE/TURN/UNDO/COVER something^
  PUT something IN/ON somewhere^
  ENTER/EXIT [something]^
  LOOK/LISTEN/TOUCH/TASTE/SMELL/EAT/DRINK [something]^
  MAKE/RUB/CUT/BURN/DIG/WAKE/KISS/ATTACK (or hit) something^
  PRAY TO/ON/IN something^
  LOOK UP/READ ABOUT topic IN something or CONSULT something ABOUT topic^
  ASK someone ABOUT topic^
  GIVE/SHOW something TO someone (or SHOW someone something)^
  TELL someone [TO] ...^
  THROW something [AT something]^
  DANCE/HOP/JUMP [ON something]^
  WAIT/SLEEP/AGAIN^
  HINT/SCORE/VERSION/HELP/SAVE/RESTORE/UNDO/QUIT";
];

[ MyObjectListing o;
 if (o hasnt concealed)
  print "^", (The) o;
];
[ HintSub;
 print "Type ~help~ for a list of commands, ~places~ for visited places, ~objects~ for items to interact with or try the following objects:";
 LoopOverScope(MyObjectListing);
];

Verb "help"
 * -> Help
 * topic -> Help;

Verb "hint" * -> Hint;

Extend "give" first
 * animate 'a' 'hint' -> Hint
 * 'up' -> Hint;

Extend "tell" first
 * animate 'to' topic -> Tell;

[ DoSub w prev i;
 print "You attempt to ";
 wn = consult_from;
 while((w = NextWordStopped())~=-1) {
  print w;
  prev = wn-1;
 }
 ! need a full stop? check last char
 i=WordLength(prev)-1;
 if (w->i ~= '.') print '.';
 new_line;
 rtrue;
]; 

Verb "do"
 * topic -> Do;

[ TrySub;
 "~Do or do not. There is no try.~^^Sorry, I can't understand infinitive verbs.";
];

Verb "try"
 * noun -> Open
 * topic -> Try;

[ SleepSub;
 if (noun == nothing) <<Make bed>>;
 if (noun has enterable) <Enter noun>;
 if (noun provides react_before) L__M(##Sleep, 1, noun);
];

Extend 'sleep' replace
 * -> Sleep
 * 'in'/'on'/'at' noun -> Sleep;

[ PraySub;
 if (noun == nothing) <<Listen>>;
 if (noun has enterable) <Enter noun>;
 if (noun provides react_before) L__M(##Pray, 1, noun);
];

[ WorshipSub;
 if (TestScope(noun, player)) print_ret (The) noun, " ", (IsOrAre) noun, " unmoved.";
 <<Listen noun>>;
];

Extend "pray" first
 * 'in'/'on'/'at' noun -> Pray
 * 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'to' 'the' 'gods' -> Pray
 * 'to' noun -> Worship
 * 'to' noun 'gods' -> Pray;

Extend 'listen'
 * 'at' door -> Listen;

Extend only 'say' first
 * 'prayer' -> Pray
 * 'prayer' 'to' noun -> Pray
 * 'prayer' 'in'/'on'/'at' noun -> Pray
 * 'prayer' 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'prayer' 'to' 'the' 'gods' -> Pray
 * 'prayer' 'to' noun -> Worship
 * 'prayer' 'to' noun 'gods' -> Pray;

Extend 'look' replace
    *                                           -> Look
    * 'at' noun                                 -> Examine
    * 'at' noun 'to'/'towards'/'in' noun=ADirection  -> Examine
    * 'inside'/'in'/'into'/'through'/'on' noun  -> Search
    * 'under' noun                              -> LookUnder
    * noun=ADirection                           -> Examine
    * 'up' topic 'in' noun                      -> Consult reverse
    * noun -> Examine
    * 'between' door -> Search
    * 'for' noun -> Examine
    * 'to' noun=ADirection                      -> Examine;

Extend "lock" first ! try other rules after these
    * "up" noun -> Lock
    * noun "up" -> Lock;
