Replace PraySub;
Replace SleepSub;
Replace JumpSub;
Replace JumpInSub;
Replace JumpOnSub;
Include "verblib";

[ GamePreRoutine;
#Ifdef DEBUG;
 print "GamePreRoutine: action = ", action;
 new_line;
#Endif;
 if (action ~= ##Jump or ##JumpOn or ##JumpIn) rfalse;
 if (RunRoutines(location, react_before)~=0) rtrue; ! include location in reactions
 rfalse;
];
[ GamePostRoutine;
 if (action ~= ##Jump or ##JumpOn or ##JumpIn) rfalse;
 if (RunRoutines(location, react_after)~=0) rtrue; ! include location in reactions
 rfalse;
];

![ InScope;
!  if (scope_reason == REACT_BEFORE_REASON or REACT_AFTER_REASON)
!    PlaceInScope(location); ! locations should react_before Jump etc.
!  rfalse;
!];

Include "grammar";

Verb 'start' 'stop' 'change' = 'switch';
Verb 'mount' 'kneel' = 'enter';
Verb 'dismount' = 'exit';
Verb 'camp' 'kip' = 'sleep';
Verb 'bite' = 'taste';
Verb 'hurt' 'kick' = 'hit';
Verb 'detach' = 'take';
Verb 'unchain' = 'unlock';
Verb 'wheel' = 'push';
Verb 'dance' = 'jump';
Verb 'rifle' 'riffle' 'ransack' 'visit' 'explore' = 'search';
Verb 'peek' = 'look';
Verb 'inspect' = 'examine';

[ MakeSub;
 if (noun ~= camp or bed) "You don't have the tools and materials for that.";
 if (location ~= Church) "This isn't an ideal spot to bed down for the night.";
 if (cushions has concealed && altar has concealed) "Ideally you would have somewhere soft to sleep.";
 deadflag = 2;
 "This is the end of the demo. Please form an orderly queue to hand in your feedback.^
 Thank you for playing!";
]; 

Verb 'make'
 * noun -> Make
 * 'up' noun -> Make
 * noun 'up' -> Make;

Attribute legible;

[ ReadSub;
  <<Examine noun>>; 
];

Extend 'read' first
 * legible -> Read;

Verb 'lift'
 * noun -> Turn
 * noun 'up' -> Push
 * noun 'with' held -> Open;

Verb 'raise' = 'lift';

[ JumpInSub; return JumpSub(); ];
[ JumpOnSub; return JumpSub(); ];
[ JumpSub act x1;
 if (noun == nothing) noun = ScopeCeiling(player);
 act = action; x1 = noun;
 if (location ~= noun && noun has enterable) <Enter noun>;
 action=act; noun=x1; ! restore values
 if (player in noun && AfterRoutines()~=0) rtrue;
 return L__M(action, 1, noun);
];

Extend 'jump'
 * 'up'/'on' 'to' noun -> Jump
 * 'to'/'onto'/'inside' noun -> Jump;

[ WinSub;
 "If only it were that easy."; 
];
Verb "win"
 * topic -> Win;

! Verbs list http://www.inform-fiction.org/manual/html/tables.html#tbl6a
[ HelpSub;
 print "The following is a non-exhaustive list of commands (sufficient to finish the game):^
  GO north or just NORTH (or in, out, up, down, n, e, s, w, ne and so on)^
  SEARCH/LOOK AT/LOOK UNDER/EXAMINE (or x) something^
  INVENTORY or just INV (or i)^
  DROP/TAKE (or get) something^
  WEAR (or put on)/DISROBE (or remove) something^
  OPEN/CLOSE/LOCK/UNLOCK/TURN ON/TURN OFF (or switch) something^
  PUSH/PULL/MOVE/TURN/UNDO/COVER something^
  PUT something IN/ON somewhere^
  ENTER/EXIT [something]^
  LOOK/LISTEN/TOUCH/TASTE/SMELL/EAT/DRINK [something]^
  MAKE/RUB/CUT/BURN/DIG/WAKE/KISS/ATTACK (or hit) something^
  PRAY TO/ON/IN something^
  LOOK UP/READ ABOUT topic IN something or CONSULT something ABOUT topic^
  ASK someone ABOUT topic^
  GIVE/SHOW something TO someone (or SHOW someone something)^
  TELL someone [TO] ...^
  THROW something [AT something]^
  DANCE/HOP/JUMP [ON something]^
  WAIT/SLEEP/AGAIN^
  HINT/SCORE/VERSION/HELP/SAVE/RESTORE/UNDO/QUIT";
];

[ MyObjectListing o;
 if (o hasnt concealed)
  print "^", (The) o;
];
[ HintSub;
 print "Type ~help~ for a list of commands, ~places~ for visited places, ~objects~ for items to interact with or try the following objects:";
 LoopOverScope(MyObjectListing);
];

Verb "help" * -> Help;
Verb "hint" * -> Hint;

Extend "give" first
 * 'up' -> Hint;

[ SleepSub;
 if (noun == nothing) <<Make bed>>;
 if (noun has enterable) <Enter noun>;
 if (noun provides react_before) L__M(##Sleep, 1, noun);
];

Extend 'sleep' replace
 * -> Sleep
 * 'in'/'on'/'at' noun -> Sleep;

[ PraySub;
 if (noun == nothing) <<Listen>>;
 if (noun has enterable) <Enter noun>;
 if (noun provides react_before) L__M(##Pray, 1, noun);
];

[ WorshipSub;
 if (TestScope(noun, player)) print_ret (The) noun, " ", (IsOrAre) noun, " unmoved.";
 <<Listen noun>>;
];

Extend "pray" first
 * 'in'/'on'/'at' noun -> Pray
 * 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'to' 'the' 'gods' -> Pray
 * 'to' noun -> Worship
 * 'to' noun 'gods' -> Pray;

Extend 'listen'
 * 'at' door -> Listen;

Extend only 'say' first
 * 'prayer' 'to' noun -> Pray
 * 'prayer' 'in'/'on'/'at' noun -> Pray
 * 'prayer' 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'prayer' 'to' 'the' 'gods' -> Pray
 * 'prayer' 'to' noun -> Worship
 * 'prayer' 'to' noun 'gods' -> Pray;

Extend "look" last ! try other rules before this one
    * noun -> Examine
    * 'between' door -> Search;

Extend "lock" first ! try these rules before other ones
    * "up" noun -> Lock
    * noun "up" -> Lock;
