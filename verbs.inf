! Copyleft Adonikam Virgo. See LICENCE.md for MIT licence.
[ InScope actor;
 if (actor == Ben) {
!  print "InScope Ben";
  PlaceInScope(ChurchBuilding);
 }
! else print "InScope player";
 rfalse;
];

[ PossessiveNeuter obj caps;
    if (obj ~= player && (obj has neuter || obj hasnt male or female)) {
     if (obj has pluralname) {
     if (caps) print "T"; else print "t";
     print "heir"; return;
     }
     if (caps) print "I"; else { print "i"; print "ts"; return; }
    }
    return Possessive(obj, caps);
];
Object LibraryMessages
 with before [ previous_parent;
  ! lm_n is the variation number, lm_o may be the noun or second noun involved
  ! lm_s may be the indirect object, subject or dictionary word e.g. 'sit'
  Go: if (lm_n == 1 && lm_o has supporter) { !this may be superceded by InsideOrOn?
          print "(first getting off ", (the) lm_o, ")^";
          previous_parent = parent(player);
          keep_silent = true; <Exit>; keep_silent = false;
          if (player in parent(previous_parent)) <<Go noun>>;
          rtrue;
      }
  Strong: CSubjectDont(actor);
          print_ret " need to ", (address) verb_word, " anything right now.";
  Prompt: if (turns == 0) print "^What next? (beginners, type help<ENTER>)^>"; else print "^>"; rtrue;
  Lock: if (lm_n ~= 4 && lm_o == nothing) rfalse;
  switch(lm_n) {
        2:  CSubjectIs  (lm_o,true); " shut at the moment.";
        3:  CSubjectWill(actor,true); " first have to close ", (the) lm_o, ".";
        4:  if (lm_o == nothing) print "That doesn't"; else CSubjectDont(lm_o,true); " seem to fit.";
        5:  if (lm_o == ChurchDoors or latch) { CSubjectVerb(actor,false,false,"shut",0,"shuts","shut"); " ", (the) lm_o, "."; }
  }
  Unlock: if (lm_n ~= 3 && lm_o == nothing) rfalse;
  switch(lm_n) {
        2:  if (lm_o == ChurchDoors or latch) { CSubjectIs  (lm_o,true); " open at the moment."; }
        3:  if (lm_o == nothing) print "That doesn't"; else CSubjectDont(lm_o,true); " seem to fit.";
        4:  if (lm_o == ChurchDoors or latch) { CSubjectVerb(actor,false,false,"open",0,"opens","opened"); " ", (the) lm_o, "."; }
  }
  Buy: print "Nothing ";
       Tense("is", "was");
       " appropriate to trade.";
  ! Avoid implications that potentially impossible actions are undertaken by saying "achieves nothing"
  Tie: if (lm_n ~= 1) rfalse;
        print "Tying ", (the) lm_o, " ";
        Tense("would achieve", "would have achieved");
        " nothing here.";
  !Untie is stubbed by ExpertGrammar.h
  Wake: print_ret (nop) CSubjectIs(actor), " already awake.";
  WakeOther: print_ret (nop) CSubjectIs(lm_o), " already awake.";
  Wave: if (lm_n ~= 2) rfalse;
        print "Waving ", (the) lm_o, " at ", (the) lm_s, " ";
        Tense("would achieve", "would have achieved");
        " nothing here.";
  Rub: if (lm_n ~= 1) rfalse;
        print "That ";
        Tense("would achieve", "would have achieved");
        " nothing here.";
  Squeeze: if (lm_n ~= 2) rfalse;
        if (lm_n has animate) "Do you intend to embrace ", (the) lm_n, "?";
        else print "Squeezing";
        print " ", (the) lm_o, " ";
        Tense("would achieve", "would have achieved");
        " nothing here.";
  JumpOver: if (lm_n ~= 1) rfalse;
        if (lm_o has door) {
         CSubjectVerb(actor,false,false,"couldn't",0,"couldn't","couldn't have");
         print " ";
         Tense("jump over","jumped over");
         print " ", (the) lm_o, ", even if ";
         !PossessiveNeuter(actor,false);
         !" legs were long enough.";
         print_ret (theActor) actor, " needed to.";
        }
        print "Jumping over ", (the) lm_o, " ";
        Tense("would achieve", "would have achieved");
        " nothing here.";
  !Give: 
  Kiss: "That's sweet, but uncalled for.";
  Blow: if (lm_o == nothing) rfalse;
        CSubjectVerb(actor,false,false,"blow",0,"blows","blew");
        " ", (ThatOrThose) lm_o, " to no effect.";
 ];

Replace PraySub;
Replace SleepSub;
Replace JumpSub;
Replace JumpOverSub;
Replace JumpInSub;
Replace JumpOnSub;
Replace ExamineSub;
Include "verblib";
Include ">follower.h";
Constant NO_ROOM;
Include ">moveclass.h";

[ GamePreRoutine;
#Ifdef DEBUG;
if (parser_trace>1)
 print "[GamePreRoutine: action = ", action, "]^";
#Endif;
  if (parent(player) ~= pews or aisle && parent(papers) ~= bag) {
   give papers ~open; move papers to bag; give bag ~open; move bag to player;
   print "You place the papers gently back and shoulder your bag again. You don't want to lose any pages accidentally.^";
  }
  else if ((~~TestScope(player,Church)) && (bag has open || parent(bag) ~= player)) {
   give bag ~open; move bag to player;
   print "You shoulder your bag again.^";
  }
 if (action == ##Remove && noun == card && second == pockets)
  move card to pockets; ! don't break assumption
 if (action == ##Examine or ##Search && s_obj == noun or second && location == Town) "It looks like there are more buildings down in the square.";
 if (action == ##Examine or ##Search && noun in compass && ZRegion(location.(noun.door_dir))==2 or 3) return PrintOrRun(location,noun.door_dir);
 if (action == ##Jump or ##JumpOn or ##JumpIn or ##JumpOver && RunRoutines(location, react_before)~=0) rtrue; ! include location in reactions
 if (action == ##Examine && noun ofclass Room) <<Look>>;
 default: ;
 rfalse;
];
[ GamePostRoutine;
#Ifdef DEBUG;
if (parser_trace>1)
 print "[GamePostRoutine: action = ", action, "]^";
#Endif;
 if (action == ##Jump or ##JumpOn or ##JumpIn or ##JumpOver && RunRoutines(location, react_after)~=0) rtrue; ! include location in reactions
 rfalse;
];

[ ChooseObjects obj code; 
  !code = 0 if expecting to exclude from "all", 1 if expected to include in "all"
  !0	  to accept the parser's decision;
  !1	  to force the object to be included; or
  !2	  to force the object to be excluded.
  if (code < 2) {
   if (obj has scenery || obj == allbodyparts) return 2;
   if (obj == player && action_to_be == ##ShakeHands) return 2;
   rfalse;
  }

  ! otherwise score preferences from 1-9
  if (action_to_be == ##Eat && obj has edible) return 3;
  if (action_to_be == ##Lock or ##Unlock && FlagOff(UNLOCHUR) && obj == righthand) return 3;
  !strategy depends on concealed and location - don't omit infer message unless absolutely necessary
  if (obj == pews or bike) return 9;
  if (obj == altar) { if (altarlegs has concealed) no_infer_message = true; return 8; }
  if (obj == altarlegs) return 7;
  if (obj == buildings) { if (ChurchDoors has concealed && action_to_be ~= ##Circum) no_infer_message = true; return 6; }
  if (obj == ChurchBuilding) { if (action_to_be == ##Circum) return 7; if (action_to_be == ##Teleport) return 6; return 5; }
  if (obj == Church) { if (action_to_be == ##Teleport) return 6; return 4; }
  if (obj == ChurchRoof) { if (ChurchRoof hasnt concealed) return 4; }
  if (obj == ChurchDoors) { if (ChurchDoors hasnt concealed) return 3; }
  if (obj == bell) { if (bell hasnt concealed && TestScope(player,Church)) return 5; }

  if (obj hasnt scenery && obj ~= allbodyparts) return 2;
  return 1;
];

[ UnknownVerb word i;
  objectloop (i has transparent && i ofclass Room)
  {
    if (WordInProperty(word,i,name))
    {
      verb_wordnum=0;
      return 'go';
    }
  }
  if (num_words > 1) {
   wn = 2;
   if (Descriptors()~=0) rfalse;
   if (TryGivenObject(allbodyparts)>0) return 'examine';
  }
  rfalse;
];

[ ScanLoc i;
#Ifdef DEBUG;
if (parser_trace>1)
 print "[Scanning room ",(the)i,"]";
#Endif;
 if (i has transparent && i hasnt concealed)
 {
  if (action_to_be == ##Teleport or ##Examine or ##Search && i has visited)
   PlaceInScope(i);
  if (i has visited)
   ScopeWithin(i);
 }
];

[ ScanObj i room;
#Ifdef DEBUG;
if (parser_trace>1)
 print "[Scanning object ",(the)i,"]";
#Endif;
          room = ScopeCeiling(i);
          if (room has transparent && room hasnt concealed)
          {
           if (action_to_be == ##Teleport or ##Examine or ##Search)
            PlaceInScope(i);
           if (i has transparent or open)
            ScopeWithin(i);
          }
];

[ TeleportScope i;
  switch (scope_stage)
    {
      1: rfalse;
      ! Note that noun is not set at this stage!!!
      2: objectloop (i ofclass Room) ScanLoc(i);
         objectloop (i has moved) ScanObj(i);
         PlaceInScope(location); ! location may not be ofclass Room
         ScopeWithin(location);
         rtrue;
      3: if (Handle_CANTSEE_PE()) rtrue;
         "That doesn't seem to be anywhere you can get to.";
    }
];

[ TeleportSub rm ceiling;
  !if (num_words == 1 && noun == nothing) return VagueGoSub();
  if (noun == location) {
   CSubjectIs  (actor,true); print " already ";
   if (location has supporter) print "on";
   else if (location ofclass Inside) print "in";
   else if (location ofclass Outside) print "at";
   else print "in";
   print_ret " ", (the) location, ".";
  }
  if (noun ofclass Room && noun has transparent && noun hasnt concealed)
   { print "(visiting ", (the) noun, ")^"; PlayerTo (noun, 2); rtrue; }
  rm = ScopeCeiling(noun);
  ceiling = ScopeCeiling(location);
  if (rm ~= nothing && rm has transparent && rm hasnt concealed && rm ofclass Room) {
   !print "valid room";
   if (rm == ceiling && ceiling ~= location) { ! the player needs to exit an enterable
    !print "leaving location";
    !<Exit location>; !FIXME use reachable library
   }
   if (rm == ceiling && ceiling == location) { ! successfully exited
    !print "found ", (the) noun, " action_to_be", action_to_be;
    !print "rm=",(the)rm," ceiling=",(the)ceiling," location=",(the)location;
   }
   else  { !disambiguate???
    print "(finding ", (the) noun, " in ", (the) rm, ")^"; PlayerTo (rm, 2); rtrue;
   }
  }
  if (noun in compass) <<Go noun>>;
  if (action == ##Examine && TestScope(noun)) {
   !print "Teleporting to examine, and found in scope.^";
   rfalse;
  }
  !else
   !print "Teleporting to examine, but out of scope.^";
];

Global ScenicFlag = 4; ! handle "examine room"
Constant ScenicError "You don't need to interact with that stuff.";
Property scenic;
Include ">scenic.h";
Include "grammar";

Verb 'change' = 'switch';
Verb 'mount' 'kneel' = 'enter';
Verb 'dismount' = 'exit';
Verb 'camp' 'kip' = 'sleep';
Verb 'lick' = 'taste';
Verb 'hurt' = 'hit';
Verb 'detach' 'collect' 'gather' = 'take';
Verb 'unchain' = 'unlock';
Verb 'wheel' = 'push';
Verb 'rifle' 'riffle' 'ransack' 'explore' = 'search';
Verb 'peek' = 'look';
Verb 'inspect' = 'examine';
Verb 'pour' = 'empty';
Verb 'grip' = 'touch';
Verb 'visit' 'travel' = 'go';
Verb 'saw' = 'cut';
Verb 'fidget' = 'wait';
Verb 'quaff' = 'drink';
Verb 'unpack' = 'open';

[ SearchOrTakeSub i found;
 if (noun == nothing) noun = location;
 if (ObjectIsUntouchable(noun)) return;
 if (noun == pockets) <<Search pockets>>; ! let before rule handle it
 if ((~~(noun ofclass Room)) && (noun hasnt container or supporter || (noun has supporter && noun has openable && noun hasnt open) || ~~child(noun))) "There's nothing there.";
 if (noun has openable && noun hasnt open && ImplicitOpen()) rtrue;
 while(child(noun)) {
  i = child(noun);
  while (i && i hasnt moved) i = sibling(i);
  if (i == nothing) break;
  while (i && i has scenery or concealed) i = sibling(i);
  if (i == nothing) break;
  print (name) i,": "; <Take i>; found = true;
 }
 if (~~found) "You haven't dropped anything here.";
];
Extend 'take'
 * multiexcept 'out' 'from'/'of' noun -> Remove
! empty object will fail multiinside, but Search works for empty pockets
 * 'my' 'things'/'stuff' -> SearchOrTake
 * 'all' 'my' 'things'/'stuff' -> SearchOrTake
 * 'my' 'things'/'stuff' 'from' noun -> SearchOrTake
 * 'all' 'my' 'things'/'stuff' 'from' noun -> SearchOrTake
 * 'all'/'contents'/'things'/'stuff' 'in'/'inside'/'from'/'of' noun -> SearchOrTake
 * 'all'/'contents'/'things'/'stuff' 'out' 'from'/'of' noun -> SearchOrTake;

Extend 'show'
 * multiheld 'to' creature -> Show;

[ EnterVagueSub;
  if (verb_word == 'sit' && TestScope(player,Church)) <<Enter pews>>;
  if (parent(player) has supporter or container) return L__M(##Enter,1,parent(player));
  if (ADirection() && verb_word == 'sit' or 'lie') <<Sleep>>;
  print "I don't know what you want to ";
  PrintCommand();
  if (verb_word == 'sit' or 'lie') print " on"; !LanguageVerbLikesAdverb
  ".";
];
Extend 'sit' first
 * -> EnterVague
 * 'on' noun=ADirection -> EnterVague;
Extend 'sit'
 * 'down' 'on'/'in' supporter -> Enter
 * 'down' -> EnterVague
 * 'down' 'on' noun=ADirection -> EnterVague
 * noun=ADirection -> Look; ! sit up
Verb 'seat' = 'put';
[ SeatSub;
 if (noun == player) <<Enter second>>;
 <<PutOn noun second>>;
];
Extend 'put' first
 * animate 'on'/'in' supporter -> Seat;

Extend 'get' first ! try other rules after these
 * 'up' -> Exit;
Extend 'get'
 * 'on' 'to' noun -> Enter
 * 'off' -> Exit;

Extend 'climb'
 * 'on' 'to' noun -> Enter
 * 'on'/'onto' noun -> Enter;

[ CircumSub;
 if (noun == ChurchBuilding) <<Go se_obj>>;
 "There's no way around.";
];
Extend 'go' first
 * scope=TeleportScope -> Teleport
 * 'near'/'nearer' 'to' scope=TeleportScope -> Teleport
 * 'near'/'nearer'/'to'/'toward'/'towards' scope=TeleportScope -> Teleport
 * 'to' 'side' 'of' noun -> Circum
 * 'to' 'the' 'side' 'of' noun -> Circum
 * 'around'/'behind'/'beside' noun -> Circum;

[ ExamineSub i;
    if (location == thedark) return L__M(##Examine, 1, noun);
    if (TeleportSub()~=0) {
#IfDef DEBUG;
      print "ExamineSub: Teleported^";
#EndIf;
    }
    i = noun.description;
    if (i == 0) {
        if (noun has container)
            if (noun has open or transparent) <<Search noun, actor>>;
            else return L__M(##Search, 5, noun);
        if (noun has switchable) { L__M(##Examine, 3, noun); rfalse; }
        !print "ExamineSub: library message 2^";
        return L__M(##Examine, 2, noun);
    }
    i = PrintOrRun(noun, description);
    if (i < 2 && noun has switchable) L__M(##Examine, 3, noun);
    AfterRoutines();
];

[ ExamineHeldSub;
 !action_to_be = ##Examine; readonly
 Handle_CANTSEE_PE();
];
!Extend 'examine' first
! * scope=TeleportScope -> Examine; !avoid "not something you need to refer to..."
Extend 'examine' last
! * noun=TeleportScope -> Examine !specifically handle objects unreachable by standard Examine
 * noun 'to' noun=ADirection -> Examine;
Extend 'examine' last
 * scope=TeleportScope -> Teleport
 * multiheld -> ExamineHeld;

[ PickVagueSub;
 if (noun hasnt door)
  print_ret "You need to choose a verb as well as choose ", (the) noun,".";
 if (second ~= nothing)
  print_ret "You cannot pick ", (the) noun, " with ", (the) second;
 "You don't have a set of lockpicks.";
];
Extend 'pick'
 * noun -> PickVague
 * noun 'with' held -> PickVague;

Extend 'cut'
 * noun 'with' held -> Cut;

[ MakeSub;
 if (noun ~= camp or bed || second == cushions or altar or d_obj) "You don't have the tools and materials for that.";
 if (location ~= Church) "This isn't an ideal spot to bed down for the night.";
 if ((second ~= bag) && (cushions has concealed || altar has concealed)) "Ideally you would have somewhere soft to sleep.";
 else if (second == bag && bag hasnt open) print "(first opening the rucksack)^";
 if (bed hasnt general) score = score + 20; give bed general;
 give bag open;
 deadflag = 2;
 "This is the end of the demo. Please form an orderly queue to hand in your feedback.^
 Thank you for playing!";
]; 

[ Makeable;
  return noun == bed or camp;
];

Verb 'make'
 * noun -> Make
 * noun noun -> Make reverse
 * noun 'in'/'with'/'on'/'from' noun -> Make
 * 'up' noun -> Make
 * noun 'up' -> Make;

Extend 'set' first ! try other rules after these
 * 'up' noun=Makeable -> Make
 * 'up' noun noun=Makeable -> Make reverse
 * 'up' noun=Makeable 'in'/'with'/'on'/'from' noun -> Make
 * noun=Makeable 'up' 'in'/'with'/'on'/'from' noun -> Make
 * noun=Makeable 'up' -> Make;
Extend 'set'
 * noun 'to' 'rest' 'on' supporter -> PutOn
 * noun 'down' 'on'/'onto' supporter -> PutOn;

Extend 'put' first ! try other rules after these
 * noun 'away' 'in' container -> Insert
 * 'up' noun=Makeable -> Make
 * 'up' noun noun=Makeable -> Make reverse
 * 'up' noun=Makeable 'in'/'with'/'on'/'from' noun -> Make
 * noun=Makeable 'up' 'in'/'with'/'on'/'from' noun -> Make
 * noun=Makeable 'up' -> Make;

Attribute legible;

[ ReadSub;
  <<Examine noun>>; 
];

Extend 'read' first ! try other rules after these
 * legible -> Read
 * legible 'about' topic -> Consult;

Verb 'lift'
 * noun -> Turn
 * noun 'up' -> Push
 * noun 'with' held -> Open;

Verb 'raise' = 'lift';

[ JumpInSub; return JumpSub(); ];
[ JumpOnSub; return JumpSub(); ];
[ JumpOverSub; return JumpSub(); ];
[ JumpSub act x1;
 if (noun == nothing) noun = ScopeCeiling(player);
 act = action; x1 = noun;
 if (location ~= noun && action ~= ##JumpOver && noun has enterable) <Enter noun>;
 action=act; noun=x1; ! restore values
 if ((action == ##JumpOver || player in noun) && AfterRoutines()~=0) rtrue;
 return L__M(action, 1, noun);
];

Extend 'jump'
 * 'up'/'on' 'to' noun -> Jump
 * 'to'/'onto'/'inside' noun -> Jump;

[ WinSub;
 "If only it were that easy."; 
];
Verb "win" "lose"
 * -> Win
 * topic -> Win;

Verb "help"
 * -> Help
 * topic -> Help;

[ MyObjectListing o;
 if (o hasnt concealed)
  print "^", (The) o;
];
[ InfoSub;
 print "Type ~verbs~ for a list of actions, ~places~ for visited places, ~objects~ for items to interact with or try the following objects:";
 LoopOverScope(MyObjectListing);
];

Verb "info"
 * -> Info
 * topic -> Info;

[ DoSub w i;
 print "You attempt to";
 for (w=1: w<=NumberWords(): w++) {
  print (char) 32;
  for (i=0: i<WordLength(w): i++)
   print (char) WordAddress(w)->i;
 }
 ! need a full stop? check last char
 i=WordLength(w-1)-1;
 if (WordAddress(w-1)->i ~= 46) print (char) 46;
 new_line;
 rtrue;
]; 

Verb "do"
 * topic -> Do;

[ SleepSub;
 if (noun == nothing or d_obj) <<Make bed>>;
 if (noun has enterable) <Enter noun>;
 if (noun provides react_before) return L__M(##Sleep, 1, noun);
 <<Examine sun>>;
];
[ SleepUnderSub;
 if (noun == nothing) "You'll have to specify what to sleep under.";
 if (noun == d_obj) "You'd need to dig a hole first.";
 if (noun provides react_before) return L__M(##SleepUnder, 1, noun);
 <<Examine sun>>;
];

Extend 'sleep' replace
 * -> Sleep
 * 'under'/'underneath'/'below' noun -> SleepUnder
 * 'in'/'on'/'at' noun -> Sleep;

[ HasOrHave obj;
 if (obj has pluralname) { print (The) obj, " have"; }
 else                    { print (The) obj, " has"; }
 return;
];

[ PraySub;
 if (noun == nothing) <<Listen>>;
 if (noun has enterable && noun ~= parent(player)) <Enter noun>;
 if (noun provides react_before) return L__M(##Pray, 1, noun);
 if (TestScope(noun, player)) print_ret (HasOrHave) noun, " insufficient authority to grant your request.";
];

[ WorshipSub;
 if (TestScope(noun, player)) print_ret (The) noun, " ", (IsOrAre) noun, " unmoved.";
 <<Listen noun>>;
];

[ PrayTopicSub;
 if (noun == nothing) {
  wn = consult_from;
  while(wn<consult_from+consult_words && NextWordStopped()~=-1 or 'door' or 'doors');
  if (NextWordStopped() == -1) <<Listen>>;
  "God knows what you're after. Maybe you're just standing in the wrong place.";
 };
 if (TestScope(noun, player)) print_ret (The) noun, " ", (IsOrAre) noun, " unmoved to grant your request.";
 <<Listen noun>>;
];

Extend 'pray' first ! try other rules after these
 * 'in'/'on'/'at' noun -> Pray
 * 'to' 'Jesus'/'god'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'to' 'the' 'gods' -> Pray
 * 'to' noun -> Worship
 * 'to' noun 'gods' -> Pray
 * 'in'/'on'/'at' noun 'that' topic -> Pray
 * 'in'/'on'/'at' noun 'for' topic -> Pray
 * 'that' topic -> PrayTopic
 * 'for' topic -> PrayTopic
 * 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' 'that' topic -> PrayTopic
 * 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' 'for' topic -> PrayTopic
 * 'to' noun 'that' topic -> PrayTopic
 * 'to' noun 'for' topic -> PrayTopic;

Extend 'listen'
 * 'at' door -> Listen;

Extend only 'say' first ! try other rules after these
 * 'prayers' -> Pray
 * 'prayer' -> Pray
 * 'prayer' 'to' noun -> Pray
 * 'prayer' 'in'/'on'/'at' noun -> Pray
 * 'prayer' 'to' 'Jesus'/'God'/'Christ'/'Allah'/'Buddha' -> Pray
 * 'prayer' 'to' 'the' 'gods' -> Pray
 * 'prayer' 'to' noun -> Worship
 * 'prayer' 'to' noun 'gods' -> Pray;

Include ">printslow.h";
[ CheeseSample;
  PrintSlowSettings.Speed = 10;
  PrintSlowSettings.Override = false;
  printslow("^> look^");
  <Look>;
  printslow("^> inventory^");
  <Inv>;
  printslow("^> examine self^");
  <Examine player>;
  printslow("^> drop rucksack^");
  <Drop bag>;
  printslow("^> search papers^");
  <Search papers>;
];

Include ">HelpRoutines.h";
Constant NO_HELP_GRAMMAR;
Extend only 'check' replace
 * noun -> Examine;
Include ">NewbieGrammar.h";

[ TrySub;
 print "~Do or do not. There is no try.~^^";
 return TooPoliteSub();
];

Extend only 'check' replace
 * door -> Open
 * 'handle' 'of' door -> Open
 * 'in' noun -> Search
 * noun -> Examine
 * 'for' noun -> Examine
 * 'for' 'a'/'another'/'different'/'alternative' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest' 'near' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest'/'voice'/'breathing' 'behind' noun -> JumpOver
 * 'for' topic -> SpecificSearch;

Extend 'look' replace
 *                                           -> Look
 * 'around'                                  -> Search
 !* 'around' door                             -> Search
 * 'at' noun                                 -> Examine
 * 'at' noun 'to'/'towards'/'in' noun=ADirection  -> Examine
 * 'inside'/'in'/'into'/'through'/'on' noun  -> Search
 * 'under' noun                              -> LookUnder
 * noun=ADirection                           -> Examine
 * 'up' topic 'in' noun                      -> Consult reverse
 * noun -> Examine
 * 'between' door -> Search
 * 'to' noun=ADirection                      -> Examine
 * 'for' noun -> Examine
 * 'for' 'a'/'another'/'different'/'alternative' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest' 'near' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest'/'voice'/'breathing' 'behind' noun -> JumpOver
 * 'for' topic -> SpecificSearch;

Extend 'search' replace
 * 'through' noun -> Search
 * scope=TeleportScope -> Search
 * 'through' scope=TeleportScope -> Search
 * noun -> Search
 * 'for' noun -> RightHere
 * 'for' 'a'/'another'/'different'/'alternative' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest' 'near' noun -> Circum
 * 'for' 'people'/'person'/'vicar'/'priest'/'voice'/'breathing' 'behind' noun -> JumpOver
 * 'for' topic -> SpecificSearch;

Extend 'find' replace
 * noun -> RightHere
 * 'a'/'another'/'different'/'alternative' 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'way' 'round'/'around'/'behind'/'beside' noun -> Circum
 * 'people'/'person'/'vicar'/'priest' 'near' noun -> Circum
 * 'people'/'person'/'vicar'/'priest' 'behind' noun -> JumpOver
 * topic -> SpecificSearch;

Extend 'give' first ! try other rules after these
 * animate 'a' 'hint' -> HintHelp
 * 'up' -> HintHelp;

Extend 'what'
 * IsAmAre 'that'/'that?'/'those'/'those?' -> NewbieGrammar
 * IsAmAre 'my' topic -> MustXMe;

Include ">ExpertGrammar.h";
Verb 'jiggle' 'wobble' 'ring' 'wring' 'fiddle' 'dangle' 'jangle' 'jingle' 'swipe' = 'shake';
[ ShakeHandsSub;
 if (second == nothing && TestScope(player,Ben)) second = Ben;
 if (second == nothing) "There's nobody else here.";
 if (noun == lefthand) "You offer your hand to shake, but ",(the) second," doesn't catch on.";
 if (noun == righthand) "~How do you do?~";
];
Extend 'shake'
 * held 'in'/'between' door -> Unlock reverse
 * multiheld 'with' creature -> ShakeHands
 * multiheld 'with' 'all'/'everyone'/'everybody' -> ShakeHands
 * multiexcept 'with' held -> ShakeHands
 * multiheld -> Shake;
Extend only 'insert'
 * held 'between' door -> Unlock reverse;
Verb 'slot' = 'insert';

Extend 'dance'
 * 'on'/'through' scope=TeleportScope -> Dance;

Extend 'rub'
 * noun 'with' noun -> RubOn;

[ UnnecSub;
 print "It's unnecessary to use ", (the) noun;
 if (second) print " on ", (the) second;
 if (second && second has lockable) " at the moment.";
 ".";
];
Extend 'lock' replace
 * noun 'with' noun=Keyish -> Lock
 * noun 'with' noun=Keyish -> Lock
 * 'up' noun 'with' noun=Keyish -> Lock
 * noun 'up' 'with' noun=Keyish -> Lock
 * 'up' noun=Keyish -> Lock
 * noun=Keyish 'up' -> Lock
 * noun 'with' noun -> Unnec reverse
 * noun 'with' noun -> Unnec reverse
 * 'up' noun 'with' noun -> Unnec reverse
 * noun 'up' 'with' noun -> Unnec reverse
 * 'up' noun -> Lock
 * noun 'up' -> Unnec;

Extend 'unlock' replace
 * noun 'with' noun=Keyish -> Unlock
 * noun 'with' noun -> Unnec reverse;

Extend 'use'
 * noun 'on'/'with'/'under' noun -> Unnec;

Extend 'put'
 * noun 'under' noun -> Unnec;

Extend only 'leave' replace
 * -> Exit
 * scope=TeleportScope -> Exit
 * noun=ADirection -> Go
 * noun -> Enter
 * 'through' noun -> Enter;

Extend only 'depart' replace
 * -> Exit
 * scope=TeleportScope -> Exit
 * noun=ADirection -> Go
 * noun -> Enter
 * 'through' noun -> Enter;

Extend only 'start'
 * noun -> SwitchOn;

Extend 'bite' replace
 * edible -> Eat
 * animate -> Attack
 * noun -> Taste;

Extend only 'try' first
 * 'handle' 'of' door -> Open;
Extend 'try'
 * enterable -> Open
 * topic -> Try;

Extend 'use'
 * 'exit'/'entrance' -> VagueGo;

Extend only 'kiss' ! can kiss objects, but not embrace large ones
 * noun -> Kiss; ! added last so creature handling unaffected

Property quip;
Constant QuipsOnByDefault;
Include ">gtalk.h";
Include ">dialogue.inf";

[TalkToSub;
  if (noun has animate) {
    "You can't think of anything to say.";
  }
  else {               !inanimate object
    if (noun has pluralname)
      print_ret (The) noun, " don't reply.";
    else
      print_ret (The) noun, " doesn't reply.";
  }
];

[NotTalkSub;
  if (noun ~= player) "Please use ASK to give orders or just type TALK TO [PERSON].";
];

Extend only 'speak' replace
 * creature        -> TalkTo
 * 'to'/'with' creature -> TalkTo
 * noun            -> TalkTo
 * 'to' noun       -> TalkTo
 * 'with' noun     -> TalkTo
 * 'to'/'with' creature 'about' topic -> NotTalk;

Verb 'talk' 't//' 'chat' 'converse'
 * creature        -> TalkTo
 * 'to'/'with' creature -> TalkTo
 * noun            -> TalkTo
 * 'to'/'with' noun       -> TalkTo
 * 'to'/'with' creature 'about' topic -> NotTalk;

! The following should be a complete list of 
! non-TALK verbs to replace, except that you
! may also want to add something like the 
! following to each of your NPC objects:
!      life [;
!        Order: NotTalkSub(); rtrue;
!      ];
! so that "MAN, GO N" is also replaced.

Extend 'answer' replace            ! = 'say' 'shout' 'speak'
 *                    -> NotTalk  ! (Except we replaced
 * topic              -> NotTalk; ! 'speak' on its own above.)
[ CallOutSub;
 if (parent(player) ~= Square or Church or pews or aisle or ChurchYard) {
  if (num_words == 1) return ShoutSub();
  else return NotTalkSub();
 }
 if (num_words == 1) ShoutSub();
 if(Ben.hears_sound()) rtrue;
 return NotTalkSub();
];
Extend only 'shout' replace
 * -> CallOut
 * topic -> CallOut;
Verb 'trade' 'sell' 'barter' = 'buy';
Extend 'buy'
 * noun 'with'/'to'/'from' creature -> Buy;
Extend 'ask' replace
 *                    -> NotTalk
 * creature 'for' noun -> AskFor
 * creature 'to' topic -> AskTo
 * 'that' creature topic -> AskTo
 * topic              -> NotTalk;
Extend 'tell' replace
 *                    -> NotTalk
 * creature 'to' topic -> AskTo
 * creature topic -> Tell
 * topic              -> NotTalk;
Extend 'no' replace
 *                    -> NotTalk
 * topic              -> NotTalk;
Extend 'yes' replace               ! = 'y//'
 *                    -> NotTalk
 * topic              -> NotTalk;
Extend 'sorry' replace
 *                    -> NotTalk
 * topic              -> NotTalk;
Verb 'confess' = 'sorry';

[ TimeSub;
 "You have no idea what time it is.";
];
Verb 'time'
 * -> Time;
Extend 'what'
 * 'is' 'the' 'time'/'time?' -> Time
 * 'time' 'is' 'it'/'it?' -> Time;
Attribute broken;
[ FixSub;
 if (noun has broken) "It's beyond your skill to repair.";
 "You can't fix that.";
];
[ BreakSub;
 CSubjectIs(noun,true); " already broken.";
];
Extend only 'fix' first
 * noun -> Fix;
Verb 'mend' 'repair' = 'fix';
Extend only 'break' first
 * broken -> Break;
[ TossSub;
 PronounNotice(noun);
 if (second == nothing) second = u_obj;
 if (second == u_obj) {
  print "Whee!^";
  if (noun ofclass hand) rtrue;
  <<Drop noun>>;
 }
 if (second in compass || second has door) "You wouldn't be that reckless, in case you hit someone.";
];
Extend 'throw'
 * multiheld noun=ADirection -> Toss
 * multiheld 'through' door -> Toss
 * multiheld 'in'/'into' 'the' 'air' -> Toss
 * multiheld 'up' 'in'/'into' 'the' 'air' -> Toss;
Extend only 'toss' first
 * multiheld noun=ADirection -> Toss
 * multiheld 'through' door -> Toss
 * multiheld 'in'/'into' 'the' 'air' -> Toss
 * multiheld 'up' 'in'/'into' 'the' 'air' -> Toss;
Extend only 'fling' first
 * multiheld noun=ADirection -> Toss
 * multiheld 'through' door -> Toss
 * multiheld 'in'/'into' 'the' 'air' -> Toss
 * multiheld 'up' 'in'/'into' 'the' 'air' -> Toss;
Extend only 'hurl' first
 * multiheld noun=ADirection -> Toss
 * multiheld 'through' door -> Toss
 * multiheld 'in'/'into' 'the' 'air' -> Toss
 * multiheld 'up' 'in'/'into' 'the' 'air' -> Toss;
[ CatchSub;
 if (noun) PronounNotice(noun);
 if (noun) "Whoops!";
 "You couldn't catch a cold.";
];
Verb 'catch'
 * -> Catch
 * moved -> Catch
 * topic -> Catch;
